diff -uNrp kernel-2.6.27.orig/drivers/mmc/core/core.c kernel-2.6.27.new/linux-2.6.27.i686/drivers/mmc/core/core.c
--- kernel-2.6.27.orig/drivers/mmc/core/core.c	2010-04-19 13:28:43.000000000 -0700
+++ kernel-2.6.27.new/drivers/mmc/core/core.c	2010-04-20 13:25:11.000000000 -0700
@@ -514,7 +514,7 @@ static void mmc_power_up(struct mmc_host
 	 * This delay should be sufficient to allow the power supply
 	 * to reach the minimum voltage.
 	 */
-	mmc_delay(2);
+	mmc_delay(400);
 
 	host->ios.clock = host->f_min;
 	host->ios.power_mode = MMC_POWER_ON;
diff -uNrp kernel-2.6.27.orig/drivers/mmc/core/sdio_irq.c kernel-2.6.27.new/linux-2.6.27.i686/drivers/mmc/core/sdio_irq.c
--- kernel-2.6.27.orig/drivers/mmc/core/sdio_irq.c	2010-04-19 13:28:43.000000000 -0700
+++ kernel-2.6.27.new/drivers/mmc/core/sdio_irq.c	2010-04-20 13:27:48.000000000 -0700
@@ -205,6 +205,11 @@ int sdio_claim_irq(struct sdio_func *fun
 		return -EBUSY;
 	}
 
+	func->irq_handler = handler;
+	ret = sdio_card_irq_get(func->card);
+	if (ret)
+		func->irq_handler = NULL;
+
 	ret = mmc_io_rw_direct(func->card, 0, 0, SDIO_CCCR_IENx, 0, &reg);
 	if (ret)
 		return ret;
@@ -217,11 +222,6 @@ int sdio_claim_irq(struct sdio_func *fun
 	if (ret)
 		return ret;
 
-	func->irq_handler = handler;
-	ret = sdio_card_irq_get(func->card);
-	if (ret)
-		func->irq_handler = NULL;
-
 	return ret;
 }
 EXPORT_SYMBOL_GPL(sdio_claim_irq);
@@ -242,11 +242,6 @@ int sdio_release_irq(struct sdio_func *f
 
 	pr_debug("SDIO: Disabling IRQ for %s...\n", sdio_func_id(func));
 
-	if (func->irq_handler) {
-		func->irq_handler = NULL;
-		sdio_card_irq_put(func->card);
-	}
-
 	ret = mmc_io_rw_direct(func->card, 0, 0, SDIO_CCCR_IENx, 0, &reg);
 	if (ret)
 		return ret;
@@ -261,6 +256,11 @@ int sdio_release_irq(struct sdio_func *f
 	if (ret)
 		return ret;
 
+	if (func->irq_handler) {
+		func->irq_handler = NULL;
+		sdio_card_irq_put(func->card);
+	}
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(sdio_release_irq);
diff -uNrp kernel-2.6.27.orig/drivers/mmc/host/sdhci.c kernel-2.6.27.new/linux-2.6.27.i686/drivers/mmc/host/sdhci.c
--- kernel-2.6.27.orig/drivers/mmc/host/sdhci.c	2010-04-19 13:28:43.000000000 -0700
+++ kernel-2.6.27.new/drivers/mmc/host/sdhci.c	2010-04-20 18:06:31.000000000 -0700
@@ -167,6 +167,21 @@ static void sdhci_led_control(struct led
 }
 #endif
 
+/* handle bus case where controller cannot detect CIRQ reliably when in 4-bit mode */
+static void sdhci_idle_bus_adjust(struct sdhci_host *host, u8 idle)
+{
+	u8 ctrl;
+	if ((host->flags & SDHCI_IN_4BIT_MODE) && (host->quirks & SDHCI_QUIRK_1BIT_INTERRUPT)){
+		/* while bus is idle, leave it in 1-bit mode at the controller level */
+		ctrl = readb(host->ioaddr + SDHCI_HOST_CONTROL);
+		ctrl &= ~SDHCI_CTRL_4BITBUS;
+		if (!idle) {
+			ctrl |= SDHCI_CTRL_4BITBUS;
+		}
+		writeb(ctrl, host->ioaddr + SDHCI_HOST_CONTROL);
+	}
+}
+
 /*****************************************************************************\
  *                                                                           *
  * Core functions                                                            *
@@ -786,7 +801,7 @@ static void sdhci_send_command(struct sd
 	WARN_ON(host->cmd);
 
 	/* Wait max 10 ms */
-	timeout = 10;
+	timeout = (10*256) + 255;
 
 	mask = SDHCI_CMD_INHIBIT;
 	if ((cmd->data != NULL) || (cmd->flags & MMC_RSP_BUSY))
@@ -807,11 +822,14 @@ static void sdhci_send_command(struct sd
 			return;
 		}
 		timeout--;
-		mdelay(1);
+		if (!(timeout & 0xFF))
+			mdelay(1);
 	}
 
 	mod_timer(&host->timer, jiffies + 10 * HZ);
 
+	sdhci_idle_bus_adjust(host, 0);
+
 	host->cmd = cmd;
 
 	sdhci_prepare_data(host, cmd->data);
@@ -1042,10 +1060,13 @@ static void sdhci_set_ios(struct mmc_hos
 
 	ctrl = readb(host->ioaddr + SDHCI_HOST_CONTROL);
 
-	if (ios->bus_width == MMC_BUS_WIDTH_4)
+	if (ios->bus_width == MMC_BUS_WIDTH_4) {
 		ctrl |= SDHCI_CTRL_4BITBUS;
-	else
+		host->flags |= SDHCI_IN_4BIT_MODE;
+	} else {
 		ctrl &= ~SDHCI_CTRL_4BITBUS;
+		host->flags &= ~SDHCI_IN_4BIT_MODE;
+	}
 
 	if (ios->timing == MMC_TIMING_SD_HS)
 		ctrl |= SDHCI_CTRL_HISPD;
@@ -1201,6 +1222,8 @@ static void sdhci_tasklet_finish(unsigne
 	host->cmd = NULL;
 	host->data = NULL;
 
+	sdhci_idle_bus_adjust(host, 1);
+
 #ifndef CONFIG_LEDS_CLASS
 	sdhci_deactivate_led(host);
 #endif
@@ -1380,8 +1403,11 @@ static irqreturn_t sdhci_irq(int irq, vo
 
 	intmask &= ~SDHCI_INT_BUS_POWER;
 
-	if (intmask & SDHCI_INT_CARD_INT)
-		cardint = 1;
+	if (intmask & SDHCI_INT_CARD_INT) {
+		if (readl(host->ioaddr + SDHCI_INT_ENABLE) & SDHCI_INT_CARD_INT) {
+			cardint = 1;
+		}
+	}
 
 	intmask &= ~SDHCI_INT_CARD_INT;
 
diff -uNrp kernel-2.6.27.orig/drivers/mmc/host/sdhci.h kernel-2.6.27.new/linux-2.6.27.i686/drivers/mmc/host/sdhci.h
--- kernel-2.6.27.orig/drivers/mmc/host/sdhci.h	2010-04-19 13:28:43.000000000 -0700
+++ kernel-2.6.27.new/drivers/mmc/host/sdhci.h	2010-04-20 13:45:07.000000000 -0700
@@ -208,6 +208,8 @@ struct sdhci_host {
 #define SDHCI_QUIRK_BROKEN_TIMEOUT_VAL			(1<<12)
 /* Controller has an issue with buffer bits for small transfers */
 #define SDHCI_QUIRK_BROKEN_SMALL_PIO			(1<<13)
+/* Controller only catches CIRQ when in 1-bit bus mode */
+#define SDHCI_QUIRK_1BIT_INTERRUPT			(1<<14)
 
 	int			irq;		/* Device IRQ */
 	void __iomem *		ioaddr;		/* Mapped address */
@@ -230,6 +232,7 @@ struct sdhci_host {
 #define SDHCI_USE_ADMA		(1<<1)		/* Host is ADMA capable */
 #define SDHCI_REQ_USE_DMA	(1<<2)		/* Use DMA for this req. */
 #define SDHCI_DEVICE_DEAD	(1<<3)		/* Device unresponsive */
+#define SDHCI_IN_4BIT_MODE	(1<<4)		/* bus is in 4-bit mode */
 
 	unsigned int		version;	/* SDHCI spec. version */
 
diff -uNrp kernel-2.6.27.orig/drivers/mmc/host/sdhci-pci.c kernel-2.6.27.new/linux-2.6.27.i686/drivers/mmc/host/sdhci-pci.c
--- kernel-2.6.27.orig/drivers/mmc/host/sdhci-pci.c	2010-04-19 13:28:43.000000000 -0700
+++ kernel-2.6.27.new/drivers/mmc/host/sdhci-pci.c	2010-04-20 13:48:33.000000000 -0700
@@ -102,7 +102,8 @@ static const struct sdhci_pci_fixes sdhc
 static const struct sdhci_pci_fixes sdhci_ene_714 = {
 	.quirks		= SDHCI_QUIRK_SINGLE_POWER_WRITE |
 			  SDHCI_QUIRK_RESET_CMD_DATA_ON_IOS |
-			  SDHCI_QUIRK_BROKEN_DMA,
+			  SDHCI_QUIRK_BROKEN_DMA |
+			  SDHCI_QUIRK_1BIT_INTERRUPT,
 };
 
 static const struct sdhci_pci_fixes sdhci_cafe = {
