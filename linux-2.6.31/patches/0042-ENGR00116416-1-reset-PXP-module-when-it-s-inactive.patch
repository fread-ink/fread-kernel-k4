From 6cffc4fb0b9c7ae4aa18fa29493e3261d80e73dd Mon Sep 17 00:00:00 2001
From: Robby Cai <r63905@freescale.com>
Date: Sat, 10 Oct 2009 16:30:06 +0800
Subject: [PATCH] ENGR00116416-1 reset PXP module when it's inactive

Putting PXP in reset state gains the lowest power.
Restrore the PXP regs once PXP comes out of reset state.

Signed-off-by: Robby Cai <r63905@freescale.com>
---
 arch/arm/mach-stmp378x/include/mach/regs-pxp.h |    1 +
 drivers/media/video/pxp.c                      |   55 ++++++++++++++++++++++++
 2 files changed, 56 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-stmp378x/include/mach/regs-pxp.h b/arch/arm/mach-stmp378x/include/mach/regs-pxp.h
index 321467d..8a196df 100644
--- a/arch/arm/mach-stmp378x/include/mach/regs-pxp.h
+++ b/arch/arm/mach-stmp378x/include/mach/regs-pxp.h
@@ -109,6 +109,7 @@
 
 #define HW_PXP_S0COLORKEYHIGH	0x190
 
+#define HW_PXP_OL0_ADDR (REGS_PXP_BASE + 0x00000200)
 #define HW_PXP_OL0		(0x200 + 0 * 0x40)
 #define HW_PXP_OL1		(0x200 + 1 * 0x40)
 #define HW_PXP_OL2		(0x200 + 2 * 0x40)
diff --git a/drivers/media/video/pxp.c b/drivers/media/video/pxp.c
index 0c9d858..02b1fe3 100644
--- a/drivers/media/video/pxp.c
+++ b/drivers/media/video/pxp.c
@@ -47,6 +47,14 @@
 
 #define V4L2_OUTPUT_TYPE_INTERNAL	4
 
+#define REG_OFFSET	0x10
+#define REGS1_NUMS	16
+#define REGS2_NUMS	5
+#define REGS3_NUMS	32
+static u32 regs1[REGS1_NUMS];
+static u32 regs2[REGS2_NUMS];
+static u32 regs3[REGS3_NUMS];
+
 static struct pxp_data_format pxp_s0_formats[] = {
 	{
 		.name = "24-bit RGB",
@@ -1204,12 +1212,59 @@ static int __devexit pxp_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+static int pxp_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	int i;
+
+	while (HW_PXP_CTRL_RD() & BM_PXP_CTRL_ENABLE)
+		;
+
+	for (i = 0; i < REGS1_NUMS; i++)
+		regs1[i] = __raw_readl(HW_PXP_CTRL_ADDR + REG_OFFSET * i);
+
+	for (i = 0; i < REGS2_NUMS; i++)
+		regs2[i] = __raw_readl(HW_PXP_PAGETABLE_ADDR + REG_OFFSET * i);
+
+	for (i = 0; i < REGS3_NUMS; i++)
+		regs3[i] = __raw_readl(HW_PXP_OL0_ADDR + REG_OFFSET * i);
+
+	HW_PXP_CTRL_SET(BM_PXP_CTRL_SFTRST);
+
+	return 0;
+}
+
+static int pxp_resume(struct platform_device *pdev)
+{
+	int i;
+
+	/* Pull PxP out of reset */
+	HW_PXP_CTRL_WR(0);
+
+	for (i = 0; i < REGS1_NUMS; i++)
+		__raw_writel(regs1[i], HW_PXP_CTRL_ADDR + REG_OFFSET * i);
+
+	for (i = 0; i < REGS2_NUMS; i++)
+		__raw_writel(regs2[i], HW_PXP_PAGETABLE_ADDR + REG_OFFSET * i);
+
+	for (i = 0; i < REGS3_NUMS; i++)
+		__raw_writel(regs3[i], HW_PXP_OL0_ADDR + REG_OFFSET * i);
+
+	return 0;
+}
+#else
+#define	pxp_suspend	NULL
+#define	pxp_resume	NULL
+#endif
+
 static struct platform_driver pxp_driver = {
 	.driver 	= {
 		.name	= PXP_DRIVER_NAME,
 	},
 	.probe		= pxp_probe,
 	.remove		= __exit_p(pxp_remove),
+	.suspend	= pxp_suspend,
+	.resume		= pxp_resume,
 };
 
 
-- 
1.5.4.4

