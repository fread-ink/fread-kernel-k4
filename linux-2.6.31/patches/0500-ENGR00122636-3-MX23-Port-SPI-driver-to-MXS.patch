From 44f8b4615b9518720f0b9507bb135ac41822c88e Mon Sep 17 00:00:00 2001
From: Robby Cai <R63905@freescale.com>
Date: Sun, 18 Apr 2010 19:30:25 +0800
Subject: [PATCH] ENGR00122636-3 [MX23] Port SPI driver to MXS

Mainly modified part to port SPI driver to MXS

Signed-off-by: Robby Cai <R63905@freescale.com>
---
 drivers/spi/Kconfig   |    5 +
 drivers/spi/Makefile  |    1 +
 drivers/spi/spi_mxs.c |  292 +++++++++++++++++++++++++------------------------
 drivers/spi/spi_mxs.h |   39 ++++---
 4 files changed, 176 insertions(+), 161 deletions(-)

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index e169151..736a12f 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -261,6 +261,11 @@ config SPI_STMP3XXX
 	help
 	  SPI driver for Freescale STMP37xx/378x SoC SSP interface
 
+config SPI_MXS
+	tristate "Freescale MXS SPI/SSP controller"
+	depends on ARCH_MXS && SPI_MASTER
+	help
+	  SPI driver for Freescale MXS SoC SSP interface
 #
 # Add new SPI master controllers in alphabetical order above this line
 #
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index b7cfb62..b6dbdf0 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -33,6 +33,7 @@ obj-$(CONFIG_SPI_MXC)			+= mxc_spi.o
 obj-$(CONFIG_SPI_XILINX)		+= xilinx_spi.o
 obj-$(CONFIG_SPI_SH_SCI)		+= spi_sh_sci.o
 obj-$(CONFIG_SPI_STMP3XXX)		+= spi_stmp.o
+obj-$(CONFIG_SPI_MXS)			+= spi_mxs.o
 # 	... add above this line ...
 
 # SPI protocol drivers (device/link on bus)
diff --git a/drivers/spi/spi_mxs.c b/drivers/spi/spi_mxs.c
index 5862ea8..f6933de 100644
--- a/drivers/spi/spi_mxs.c
+++ b/drivers/spi/spi_mxs.c
@@ -1,20 +1,26 @@
 /*
- * Freescale STMP378X SPI master driver
+ * Freescale MXS SPI master driver
  *
  * Author: dmitry pervushin <dimka@embeddedalley.com>
  *
- * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2008-2010 Freescale Semiconductor, Inc.
  * Copyright 2008 Embedded Alley Solutions, Inc All Rights Reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
  *
- * http://www.opensource.org/licenses/gpl-license.html
- * http://www.gnu.org/copyleft/gpl.html
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
+
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/interrupt.h>
@@ -27,62 +33,57 @@
 #include <linux/errno.h>
 #include <asm/dma.h>
 
-#include <mach/stmp3xxx.h>
-#include <mach/platform.h>
 #include <mach/regs-ssp.h>
-#include <mach/regs-apbh.h>
-#include "spi_stmp.h"
+#include <mach/dmaengine.h>
+#include <mach/device.h>
+#include <mach/system.h>
+#include <mach/hardware.h>
+
+#include "spi_mxs.h"
 
 /* 0 means DMA modei(recommended, default), !0 - PIO mode */
 static int pio /* = 0 */;
 static int debug;
 
 /**
- * stmp_spi_init_hw
+ * mxs_spi_init_hw
  *
  * Initialize the SSP port
  */
-static int stmp_spi_init_hw(struct stmp_spi *ss)
+static int mxs_spi_init_hw(struct mxs_spi *ss)
 {
 	int err;
 
-	err = stmp37xx_spi_pins_request((char *)dev_name(ss->master_dev), ss->id);
-	if (err)
-		goto out;
-
-	ss->clk = clk_get(NULL, "ssp");
+	ss->clk = clk_get(NULL, "ssp.0");
 	if (IS_ERR(ss->clk)) {
 		err = PTR_ERR(ss->clk);
-		goto out_free_pins;
+		goto out;
 	}
 	clk_enable(ss->clk);
 
-	stmp3xxx_reset_block((void *)ss->regs, 0);
-	stmp3xxx_dma_reset_channel(ss->dma);
+	mxs_reset_block((void *)ss->regs, 0);
+	mxs_dma_reset(ss->dma);
 
 	return 0;
 
-out_free_pins:
-	stmp37xx_spi_pins_release((char *)dev_name(ss->master_dev), ss->id);
 out:
 	return err;
 }
 
-static void stmp_spi_release_hw(struct stmp_spi *ss)
+static void mxs_spi_release_hw(struct mxs_spi *ss)
 {
 	if (ss->clk && !IS_ERR(ss->clk)) {
 		clk_disable(ss->clk);
 		clk_put(ss->clk);
 	}
-	stmp37xx_spi_pins_release((char *)dev_name(ss->master_dev), ss->id);
 }
 
-static int stmp_spi_setup_transfer(struct spi_device *spi,
+static int mxs_spi_setup_transfer(struct spi_device *spi,
 		struct spi_transfer *t)
 {
 	u8 bits_per_word;
 	u32 hz;
-	struct stmp_spi *ss /* = spi_master_get_devdata(spi->master) */;
+	struct mxs_spi *ss /* = spi_master_get_devdata(spi->master) */;
 	u16 rate;
 
 	ss = spi_master_get_devdata(spi->master);
@@ -114,7 +115,7 @@ static int stmp_spi_setup_transfer(struct spi_device *spi,
 		return -EINVAL;
 	}
 
-	dev_dbg(&spi->dev, "Requested clk rate = %uHz, max = %uHz/%d = %uHz\n",
+	dev_dbg(&spi->dev, "Requested clk rate = %uHz, max = %ukHz/%d = %uHz\n",
 		hz, ss->speed_khz, ss->divider,
 		ss->speed_khz * 1000 / ss->divider);
 
@@ -126,11 +127,11 @@ static int stmp_spi_setup_transfer(struct spi_device *spi,
 
 	rate = 1000 * ss->speed_khz/ss->divider/hz;
 
-	__raw_writel(BF(ss->divider, SSP_TIMING_CLOCK_DIVIDE) |
-		BF(rate - 1, SSP_TIMING_CLOCK_RATE), ss->regs + HW_SSP_TIMING);
+	__raw_writel(BF_SSP_TIMING_CLOCK_DIVIDE(ss->divider) |
+		BF_SSP_TIMING_CLOCK_RATE(rate - 1), ss->regs + HW_SSP_TIMING);
 
-	__raw_writel(BF(BV_SSP_CTRL1_SSP_MODE__SPI, SSP_CTRL1_SSP_MODE) |
-		BF(BV_SSP_CTRL1_WORD_LENGTH__EIGHT_BITS, SSP_CTRL1_WORD_LENGTH) |
+	__raw_writel(BF_SSP_CTRL1_SSP_MODE(BV_SSP_CTRL1_SSP_MODE__SPI) |
+		BF_SSP_CTRL1_WORD_LENGTH(BV_SSP_CTRL1_WORD_LENGTH__EIGHT_BITS) |
 		((spi->mode & SPI_CPOL) ? BM_SSP_CTRL1_POLARITY : 0) |
 		((spi->mode & SPI_CPHA) ? BM_SSP_CTRL1_PHASE : 0) |
 		(pio ? 0 : BM_SSP_CTRL1_DMA_ENABLE), ss->regs + HW_SSP_CTRL1);
@@ -141,20 +142,20 @@ static int stmp_spi_setup_transfer(struct spi_device *spi,
 }
 
 
-static void stmp_spi_cleanup(struct spi_device *spi)
+static void mxs_spi_cleanup(struct spi_device *spi)
 {
-	struct stmp37xx_spi_platform_data *pdata = spi->dev.platform_data;
+	struct mxs_spi_platform_data *pdata = spi->dev.platform_data;
 
-	if (pdata && pdata->hw_release)
-		pdata->hw_release(spi);
+	if (pdata && pdata->hw_pin_release)
+		pdata->hw_pin_release();
 }
 
 /* the spi->mode bits understood by this driver: */
 #define MODEBITS (SPI_CPOL | SPI_CPHA)
-static int stmp_spi_setup(struct spi_device *spi)
+static int mxs_spi_setup(struct spi_device *spi)
 {
-	struct stmp37xx_spi_platform_data *pdata;
-	struct stmp_spi *ss;
+	struct mxs_spi_platform_data *pdata;
+	struct mxs_spi *ss;
 	int err = 0;
 
 	ss = spi_master_get_devdata(spi->master);
@@ -174,32 +175,32 @@ static int stmp_spi_setup(struct spi_device *spi)
 
 	pdata = spi->dev.platform_data;
 
-	if (pdata && pdata->hw_init) {
-		err = pdata->hw_init(spi);
+	if (pdata && pdata->hw_pin_init) {
+		err = pdata->hw_pin_init();
 		if (err)
 			goto out;
 	}
 
-	err = stmp_spi_setup_transfer(spi, NULL);
+	err = mxs_spi_setup_transfer(spi, NULL);
 	if (err)
 		goto out2;
 	return 0;
 
 out2:
-	if (pdata)
-		pdata->hw_release(spi);
+	if (pdata && pdata->hw_pin_release)
+		pdata->hw_pin_release();
 out:
 	dev_err(&spi->dev, "Failed to setup transfer, error = %d\n", err);
 	return err;
 }
 
-static inline u32 stmp_spi_cs(unsigned cs)
+static inline u32 mxs_spi_cs(unsigned cs)
 {
 	return  ((cs & 1) ? BM_SSP_CTRL0_WAIT_FOR_CMD : 0) |
 		((cs & 2) ? BM_SSP_CTRL0_WAIT_FOR_IRQ : 0);
 }
 
-static int stmp_spi_txrx_dma(struct stmp_spi *ss, int cs,
+static int mxs_spi_txrx_dma(struct mxs_spi *ss, int cs,
 		unsigned char *buf, dma_addr_t dma_buf, int len,
 		int *first, int *last, int write)
 {
@@ -213,29 +214,28 @@ static int stmp_spi_txrx_dma(struct stmp_spi *ss, int cs,
 	c0 |= (write ? 0 : BM_SSP_CTRL0_READ);
 	c0 |= BM_SSP_CTRL0_DATA_XFER;
 
-	c0 |= stmp_spi_cs(cs);
+	c0 |= mxs_spi_cs(cs);
 
-	c0 |= BF(len, SSP_CTRL0_XFER_COUNT);
+	c0 |= BF_SSP_CTRL0_XFER_COUNT(len);
 
 	if (!dma_buf)
 		spi_buf_dma = dma_map_single(ss->master_dev, buf, len, dir);
 
-	ss->d.command->cmd =
-		BF(len, APBH_CHn_CMD_XFER_COUNT) |
-		BF(1, APBH_CHn_CMD_CMDWORDS) |
-		BM_APBH_CHn_CMD_WAIT4ENDCMD |
-		BM_APBH_CHn_CMD_IRQONCMPLT  |
-		BF(write ? BV_APBH_CHn_CMD_COMMAND__DMA_READ :
-			BV_APBH_CHn_CMD_COMMAND__DMA_WRITE,
-			APBH_CHn_CMD_COMMAND);
-	ss->d.command->pio_words[0] = c0;
-	ss->d.command->buf_ptr = spi_buf_dma;
-
-	stmp3xxx_dma_reset_channel(ss->dma);
-	stmp3xxx_dma_clear_interrupt(ss->dma);
-	stmp3xxx_dma_enable_interrupt(ss->dma);
+	ss->pdesc->cmd.cmd.bits.bytes = len;
+	ss->pdesc->cmd.cmd.bits.pio_words = 1;
+	ss->pdesc->cmd.cmd.bits.wait4end = 1;
+	ss->pdesc->cmd.cmd.bits.dec_sem = 1;
+	ss->pdesc->cmd.cmd.bits.irq = 1;
+	ss->pdesc->cmd.cmd.bits.command = write ? DMA_READ : DMA_WRITE;
+	ss->pdesc->cmd.address = spi_buf_dma;
+	ss->pdesc->cmd.pio_words[0] = c0;
+	mxs_dma_desc_append(ss->dma, ss->pdesc);
+
+	mxs_dma_reset(ss->dma);
+	mxs_dma_ack_irq(ss->dma);
+	mxs_dma_enable_irq(ss->dma, 1);
 	init_completion(&ss->done);
-	stmp3xxx_dma_go(ss->dma, &ss->d, 1);
+	mxs_dma_enable(ss->dma);
 	wait_for_completion(&ss->done);
 	count = 10000;
 	while ((__raw_readl(ss->regs + HW_SSP_CTRL0) & BM_SSP_CTRL0_RUN) && count--)
@@ -252,34 +252,34 @@ static int stmp_spi_txrx_dma(struct stmp_spi *ss, int cs,
 	return status;
 }
 
-static inline void stmp_spi_enable(struct stmp_spi *ss)
+static inline void mxs_spi_enable(struct mxs_spi *ss)
 {
 	__raw_writel(BM_SSP_CTRL0_LOCK_CS, ss->regs + HW_SSP_CTRL0_SET);
 	__raw_writel(BM_SSP_CTRL0_IGNORE_CRC, ss->regs + HW_SSP_CTRL0_CLR);
 }
 
-static inline void stmp_spi_disable(struct stmp_spi *ss)
+static inline void mxs_spi_disable(struct mxs_spi *ss)
 {
 	__raw_writel(BM_SSP_CTRL0_LOCK_CS, ss->regs + HW_SSP_CTRL0_CLR);
 	__raw_writel(BM_SSP_CTRL0_IGNORE_CRC, ss->regs + HW_SSP_CTRL0_SET);
 }
 
-static int stmp_spi_txrx_pio(struct stmp_spi *ss, int cs,
+static int mxs_spi_txrx_pio(struct mxs_spi *ss, int cs,
 		unsigned char *buf, int len,
 		int *first, int *last, int write)
 {
 	int count;
 
 	if (*first) {
-		stmp_spi_enable(ss);
+		mxs_spi_enable(ss);
 		*first = 0;
 	}
 
-	__raw_writel(stmp_spi_cs(cs), ss->regs + HW_SSP_CTRL0_SET);
+	__raw_writel(mxs_spi_cs(cs), ss->regs + HW_SSP_CTRL0_SET);
 
 	while (len--) {
 		if (*last && len == 0) {
-			stmp_spi_disable(ss);
+			mxs_spi_disable(ss);
 			*last = 0;
 		}
 		__raw_writel(BM_SSP_CTRL0_XFER_COUNT,
@@ -340,7 +340,7 @@ static int stmp_spi_txrx_pio(struct stmp_spi *ss, int cs,
 	return len < 0 ? 0 : -ETIMEDOUT;
 }
 
-static int stmp_spi_handle_message(struct stmp_spi *ss, struct spi_message *m)
+static int mxs_spi_handle_message(struct mxs_spi *ss, struct spi_message *m)
 {
 	int first, last;
 	struct spi_transfer *t, *tmp_t;
@@ -353,7 +353,7 @@ static int stmp_spi_handle_message(struct stmp_spi *ss, struct spi_message *m)
 
 	list_for_each_entry_safe(t, tmp_t, &m->transfers, transfer_list) {
 
-		stmp_spi_setup_transfer(m->spi, t);
+		mxs_spi_setup_transfer(m->spi, t);
 
 		if (&t->transfer_list == m->transfers.next)
 			first = !0;
@@ -371,9 +371,9 @@ static int stmp_spi_handle_message(struct stmp_spi *ss, struct spi_message *m)
 		 */
 		if (t->tx_buf) {
 			status = pio ?
-			   stmp_spi_txrx_pio(ss, cs, (void *)t->tx_buf,
+			   mxs_spi_txrx_pio(ss, cs, (void *)t->tx_buf,
 				   t->len, &first, &last, 1) :
-			   stmp_spi_txrx_dma(ss, cs, (void *)t->tx_buf,
+			   mxs_spi_txrx_dma(ss, cs, (void *)t->tx_buf,
 				   t->tx_dma, t->len, &first, &last, 1);
 			if (debug) {
 				if (t->len < 0x10)
@@ -386,9 +386,9 @@ static int stmp_spi_handle_message(struct stmp_spi *ss, struct spi_message *m)
 		}
 		if (t->rx_buf) {
 			status = pio ?
-			   stmp_spi_txrx_pio(ss, cs, t->rx_buf,
+			   mxs_spi_txrx_pio(ss, cs, t->rx_buf,
 				   t->len, &first, &last, 0):
-			   stmp_spi_txrx_dma(ss, cs, t->rx_buf,
+			   mxs_spi_txrx_dma(ss, cs, t->rx_buf,
 				   t->rx_dma, t->len, &first, &last, 0);
 			if (debug) {
 				if (t->len < 0x10)
@@ -410,14 +410,14 @@ static int stmp_spi_handle_message(struct stmp_spi *ss, struct spi_message *m)
 }
 
 /**
- * stmp_spi_handle
+ * mxs_spi_handle
  *
  * The workhorse of the driver - it handles messages from the list
  *
  **/
-static void stmp_spi_handle(struct work_struct *w)
+static void mxs_spi_handle(struct work_struct *w)
 {
-	struct stmp_spi *ss = container_of(w, struct stmp_spi, work);
+	struct mxs_spi *ss = container_of(w, struct mxs_spi, work);
 	unsigned long flags;
 	struct spi_message *m;
 
@@ -429,7 +429,7 @@ static void stmp_spi_handle(struct work_struct *w)
 		list_del_init(&m->queue);
 		spin_unlock_irqrestore(&ss->lock, flags);
 
-		m->status = stmp_spi_handle_message(ss, m);
+		m->status = mxs_spi_handle_message(ss, m);
 		if (m->complete)
 			m->complete(m->context);
 
@@ -441,7 +441,7 @@ static void stmp_spi_handle(struct work_struct *w)
 }
 
 /**
- * stmp_spi_transfer
+ * mxs_spi_transfer
  *
  * Called indirectly from spi_async, queues all the messages to
  * spi_handle_message
@@ -449,9 +449,9 @@ static void stmp_spi_handle(struct work_struct *w)
  * @spi: spi device
  * @m: message to be queued
 **/
-static int stmp_spi_transfer(struct spi_device *spi, struct spi_message *m)
+static int mxs_spi_transfer(struct spi_device *spi, struct spi_message *m)
 {
-	struct stmp_spi *ss = spi_master_get_devdata(spi->master);
+	struct mxs_spi *ss = spi_master_get_devdata(spi->master);
 	unsigned long flags;
 
 	m->status = -EINPROGRESS;
@@ -462,18 +462,19 @@ static int stmp_spi_transfer(struct spi_device *spi, struct spi_message *m)
 	return 0;
 }
 
-static irqreturn_t stmp_spi_irq(int irq, void *dev_id)
+static irqreturn_t mxs_spi_irq_dma(int irq, void *dev_id)
 {
-	struct stmp_spi *ss = dev_id;
+	struct mxs_spi *ss = dev_id;
 
-	stmp3xxx_dma_clear_interrupt(ss->dma);
+	mxs_dma_ack_irq(ss->dma);
+	mxs_dma_cooked(ss->dma, NULL);
 	complete(&ss->done);
 	return IRQ_HANDLED;
 }
 
-static irqreturn_t stmp_spi_irq_err(int irq, void *dev_id)
+static irqreturn_t mxs_spi_irq_err(int irq, void *dev_id)
 {
-	struct stmp_spi *ss = dev_id;
+	struct mxs_spi *ss = dev_id;
 	u32 c1, st;
 
 	c1 = __raw_readl(ss->regs + HW_SSP_CTRL1);
@@ -484,16 +485,16 @@ static irqreturn_t stmp_spi_irq_err(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static int __init stmp_spi_probe(struct platform_device *dev)
+static int __init mxs_spi_probe(struct platform_device *dev)
 {
 	int err = 0;
 	struct spi_master *master;
-	struct stmp_spi *ss;
+	struct mxs_spi *ss;
 	struct resource *r;
 	u32 mem;
 
 	/* Get resources(memory, IRQ) associated with the device */
-	master = spi_alloc_master(&dev->dev, sizeof(struct stmp_spi));
+	master = spi_alloc_master(&dev->dev, sizeof(struct mxs_spi));
 
 	if (master == NULL) {
 		err = -ENOMEM;
@@ -510,27 +511,31 @@ static int __init stmp_spi_probe(struct platform_device *dev)
 
 	ss = spi_master_get_devdata(master);
 	ss->master_dev = &dev->dev;
-	ss->id = dev->id;
 
-	INIT_WORK(&ss->work, stmp_spi_handle);
+	INIT_WORK(&ss->work, mxs_spi_handle);
 	INIT_LIST_HEAD(&ss->queue);
 	spin_lock_init(&ss->lock);
 	ss->workqueue = create_singlethread_workqueue(dev_name(&dev->dev));
-	master->transfer = stmp_spi_transfer;
-	master->setup = stmp_spi_setup;
-	master->cleanup = stmp_spi_cleanup;
+	master->transfer = mxs_spi_transfer;
+	master->setup = mxs_spi_setup;
+	master->cleanup = mxs_spi_cleanup;
 
 	if (!request_mem_region(r->start,
-			r->end - r->start + 1, dev_name(&dev->dev))) {
+			resource_size(r), dev_name(&dev->dev))) {
 		err = -ENXIO;
 		goto out_put_master;
 	}
 	mem = r->start;
 
-	ss->regs = r->start - STMP3XXX_REGS_PHBASE + STMP3XXX_REGS_BASE;
+	ss->regs = IO_ADDRESS(r->start);
 
-	ss->irq = platform_get_irq(dev, 0);
-	if (ss->irq < 0) {
+	ss->irq_dma = platform_get_irq(dev, 0);
+	if (ss->irq_dma < 0) {
+		err = -ENXIO;
+		goto out_put_master;
+	}
+	ss->irq_err = platform_get_irq(dev, 1);
+	if (ss->irq_err < 0) {
 		err = -ENXIO;
 		goto out_put_master;
 	}
@@ -542,38 +547,40 @@ static int __init stmp_spi_probe(struct platform_device *dev)
 	}
 
 	ss->dma = r->start;
-	err = stmp3xxx_dma_request(ss->dma, &dev->dev, (char *)dev_name(&dev->dev));
+	err = mxs_dma_request(ss->dma, &dev->dev, (char *)dev_name(&dev->dev));
 	if (err)
 		goto out_put_master;
 
-	err = stmp3xxx_dma_allocate_command(ss->dma, &ss->d);
-	if (err)
+	ss->pdesc = mxs_dma_alloc_desc();
+	if (ss->pdesc == NULL || IS_ERR(ss->pdesc)) {
+		err = -ENOMEM;
 		goto out_free_dma;
+	}
 
-	master->bus_num = dev->id;
+	master->bus_num = dev->id + 1;
 	master->num_chipselect = 1;
 
 	/* SPI controller initializations */
-	err = stmp_spi_init_hw(ss);
+	err = mxs_spi_init_hw(ss);
 	if (err) {
 		dev_dbg(&dev->dev, "cannot initialize hardware\n");
 		goto out_free_dma_desc;
 	}
 
-	clk_set_rate(ss->clk, 120000);
-	ss->speed_khz = clk_get_rate(ss->clk);
+	clk_set_rate(ss->clk, 120 * 1000 * 1000);
+	ss->speed_khz = clk_get_rate(ss->clk) / 1000;
 	ss->divider = 2;
 	dev_info(&dev->dev, "Max possible speed %d = %ld/%d kHz\n",
 		ss->speed_khz, clk_get_rate(ss->clk), ss->divider);
 
 	/* Register for SPI Interrupt */
-	err = request_irq(ss->irq, stmp_spi_irq, 0,
+	err = request_irq(ss->irq_dma, mxs_spi_irq_dma, 0,
 			dev_name(&dev->dev), ss);
 	if (err) {
 		dev_dbg(&dev->dev, "request_irq failed, %d\n", err);
 		goto out_release_hw;
 	}
-	err = request_irq(IRQ_SSP_ERROR, stmp_spi_irq_err, IRQF_SHARED,
+	err = request_irq(ss->irq_err, mxs_spi_irq_err, IRQF_SHARED,
 			dev_name(&dev->dev), ss);
 	if (err) {
 		dev_dbg(&dev->dev, "request_irq(error) failed, %d\n", err);
@@ -586,29 +593,29 @@ static int __init stmp_spi_probe(struct platform_device *dev)
 		goto out_free_irq_2;
 	}
 	dev_info(&dev->dev, "at 0x%08X mapped to 0x%08X, irq=%d, bus %d, %s\n",
-			mem, (u32)ss->regs, ss->irq,
+			mem, (u32)ss->regs, ss->irq_dma,
 			master->bus_num, pio ? "PIO" : "DMA");
 	return 0;
 
 out_free_irq_2:
-	free_irq(IRQ_SSP_ERROR, ss);
+	free_irq(ss->irq_err, ss);
 out_free_irq:
-	free_irq(ss->irq, ss);
+	free_irq(ss->irq_dma, ss);
 out_free_dma_desc:
-	stmp3xxx_dma_free_command(ss->dma, &ss->d);
+	mxs_dma_free_desc(ss->pdesc);
 out_free_dma:
-	stmp3xxx_dma_release(ss->dma);
+	mxs_dma_release(ss->dma, &dev->dev);
 out_release_hw:
-	stmp_spi_release_hw(ss);
+	mxs_spi_release_hw(ss);
 out_put_master:
 	spi_master_put(master);
 out0:
 	return err;
 }
 
-static int __devexit stmp_spi_remove(struct platform_device *dev)
+static int __devexit mxs_spi_remove(struct platform_device *dev)
 {
-	struct stmp_spi *ss;
+	struct mxs_spi *ss;
 	struct spi_master *master;
 
 	master = platform_get_drvdata(dev);
@@ -617,12 +624,13 @@ static int __devexit stmp_spi_remove(struct platform_device *dev)
 	ss = spi_master_get_devdata(master);
 	if (ss == NULL)
 		goto out1;
-	free_irq(ss->irq, ss);
+	free_irq(ss->irq_err, ss);
+	free_irq(ss->irq_dma, ss);
 	if (ss->workqueue)
 		destroy_workqueue(ss->workqueue);
-	stmp3xxx_dma_free_command(ss->dma, &ss->d);
-	stmp3xxx_dma_release(ss->dma);
-	stmp_spi_release_hw(ss);
+	mxs_dma_free_desc(ss->pdesc);
+	mxs_dma_release(ss->dma, &dev->dev);
+	mxs_spi_release_hw(ss);
 	platform_set_drvdata(dev, 0);
 out1:
 	spi_master_put(master);
@@ -631,9 +639,9 @@ out0:
 }
 
 #ifdef CONFIG_PM
-static int stmp_spi_suspend(struct platform_device *pdev, pm_message_t pmsg)
+static int mxs_spi_suspend(struct platform_device *pdev, pm_message_t pmsg)
 {
-	struct stmp_spi *ss;
+	struct mxs_spi *ss;
 	struct spi_master *master;
 
 	master = platform_get_drvdata(pdev);
@@ -645,9 +653,9 @@ static int stmp_spi_suspend(struct platform_device *pdev, pm_message_t pmsg)
 	return 0;
 }
 
-static int stmp_spi_resume(struct platform_device *pdev)
+static int mxs_spi_resume(struct platform_device *pdev)
 {
-	struct stmp_spi *ss;
+	struct mxs_spi *ss;
 	struct spi_master *master;
 
 	master = platform_get_drvdata(pdev);
@@ -662,35 +670,35 @@ static int stmp_spi_resume(struct platform_device *pdev)
 }
 
 #else
-#define stmp_spi_suspend NULL
-#define stmp_spi_resume  NULL
+#define mxs_spi_suspend NULL
+#define mxs_spi_resume  NULL
 #endif
 
-static struct platform_driver stmp_spi_driver = {
-	.probe	= stmp_spi_probe,
-	.remove	= __devexit_p(stmp_spi_remove),
+static struct platform_driver mxs_spi_driver = {
+	.probe	= mxs_spi_probe,
+	.remove	= __devexit_p(mxs_spi_remove),
 	.driver = {
-		.name = "stmp3xxx_ssp",
+		.name = "mxs-spi",
 		.owner = THIS_MODULE,
 	},
-	.suspend = stmp_spi_suspend,
-	.resume  = stmp_spi_resume,
+	.suspend = mxs_spi_suspend,
+	.resume  = mxs_spi_resume,
 };
 
-static int __init stmp_spi_init(void)
+static int __init mxs_spi_init(void)
 {
-	return platform_driver_register(&stmp_spi_driver);
+	return platform_driver_register(&mxs_spi_driver);
 }
 
-static void __exit stmp_spi_exit(void)
+static void __exit mxs_spi_exit(void)
 {
-	platform_driver_unregister(&stmp_spi_driver);
+	platform_driver_unregister(&mxs_spi_driver);
 }
 
-module_init(stmp_spi_init);
-module_exit(stmp_spi_exit);
+module_init(mxs_spi_init);
+module_exit(mxs_spi_exit);
 module_param(pio, int, S_IRUGO);
 module_param(debug, int, S_IRUGO);
 MODULE_AUTHOR("dmitry pervushin <dimka@embeddedalley.com>");
-MODULE_DESCRIPTION("STMP37xx SPI/SSP");
+MODULE_DESCRIPTION("MXS SPI/SSP");
 MODULE_LICENSE("GPL");
diff --git a/drivers/spi/spi_mxs.h b/drivers/spi/spi_mxs.h
index 764edd6..7fbcb43 100644
--- a/drivers/spi/spi_mxs.h
+++ b/drivers/spi/spi_mxs.h
@@ -1,37 +1,38 @@
 /*
- * Freescale STMP378X SPI master driver
+ * Freescale MXS SPI master driver
  *
  * Author: dmitry pervushin <dimka@embeddedalley.com>
  *
- * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2008-2010 Freescale Semiconductor, Inc.
  * Copyright 2008 Embedded Alley Solutions, Inc All Rights Reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
  *
- * http://www.opensource.org/licenses/gpl-license.html
- * http://www.gnu.org/copyleft/gpl.html
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
+
 #ifndef __SPI_STMP_H
 #define __SPI_STMP_H
 
 #include <mach/dma.h>
 
-/* These two come from arch/arm/mach-xxxxx/spi.c */
-int stmp37xx_spi_pins_request(char *id, int ssp);
-void stmp37xx_spi_pins_release(char *id, int ssp);
-
-struct stmp_spi {
-	int		id;
-
+struct mxs_spi {
 	void __iomem	*regs;	/* vaddr of the control registers */
 
-	u32		irq;
+	u32		irq_dma;
+	u32		irq_err;
 	u32		dma;
-	struct stmp3xxx_dma_descriptor d;
+	struct mxs_dma_desc *pdesc;
 
 	u32		speed_khz;
 	u32		saved_timings;
-- 
1.5.4.4

