From 0e7182898fc79200ab3c3bcd27a74f593d934930 Mon Sep 17 00:00:00 2001
From: Robert Lee <robert.lee@freescale.com>
Date: Fri, 30 Apr 2010 18:13:30 -0500
Subject: [PATCH] ENGR00122951 MX23 w/ mDDR: EMI 24MHz clock changes caused crashes

MX23 w/ mDDR: EMI clock change code causes crashes with 24MHz state transitions.

Signed-off-by: Robert Lee <robert.lee@freescale.com>
---
 arch/arm/mach-mx23/emi.S   |   93 +++++++++++++++++++++++++++----------------
 arch/arm/mach-mx23/emi.inc |   68 +++++++++++++++++++++++++-------
 2 files changed, 111 insertions(+), 50 deletions(-)

diff --git a/arch/arm/mach-mx23/emi.S b/arch/arm/mach-mx23/emi.S
index 5799ca2..41e1ea6 100644
--- a/arch/arm/mach-mx23/emi.S
+++ b/arch/arm/mach-mx23/emi.S
@@ -38,6 +38,8 @@
 #define SCALING_DATA_NEW_FREQ_OFFSET    12
 #define REGS_CLKCTRL_BASE MX23_SOC_IO_ADDRESS(CLKCTRL_PHYS_ADDR)
 #define HW_CLKCTRL_EMI_ADDR (REGS_CLKCTRL_BASE + HW_CLKCTRL_EMI)
+#define HW_CLKCTRL_FRAC_SET_ADDR (REGS_CLKCTRL_BASE + HW_CLKCTRL_FRAC_SET)
+#define HW_CLKCTRL_FRAC_CLR_ADDR (REGS_CLKCTRL_BASE + HW_CLKCTRL_FRAC_CLR)
 #define HW_CLKCTRL_FRAC_ADDR (REGS_CLKCTRL_BASE + HW_CLKCTRL_FRAC)
 #define HW_EMI_CTRL_ADDR MX23_SOC_IO_ADDRESS(REGS_EMI_PHYS + HW_EMI_CTRL)
 #define HW_DRAM_CTL04_ADDR MX23_SOC_IO_ADDRESS(REGS_DRAM_PHYS + HW_DRAM_CTL04)
@@ -72,53 +74,82 @@ ENTRY(mxs_ram_freq_scale)
 	beq	1b
 	nop
 
+
+	@ RAM to clk from xtal
+	mov	r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x000000FF)
+	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x0000FF00)
+	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x00FF0000)
+	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0xFF000000)
+	mov	r1, #(1<<6)
+	str	r1, [r0, #4]
+	mov	r0, #(HW_CLKCTRL_EMI_ADDR & 0x000000FF)
+	orr	r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0x0000FF00)
+	orr	r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0x00FF0000)
+	orr	r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0xFF000000)
+101:	ldr     r1, [r0]
+	tst     r1, #BM_CLKCTRL_EMI_BUSY_REF_XTAL
+	bne     101b
+
+	@ Gate ref_emi
+	mov	r0, #(HW_CLKCTRL_FRAC_SET_ADDR & 0x000000FF)
+	orr	r0, r0, #(HW_CLKCTRL_FRAC_SET_ADDR & 0x0000FF00)
+	orr	r0, r0, #(HW_CLKCTRL_FRAC_SET_ADDR & 0x00FF0000)
+	orr	r0, r0, #(HW_CLKCTRL_FRAC_SET_ADDR & 0xFF000000)
+
+	mov r1, #(BM_CLKCTRL_FRAC_CLKGATEEMI)
+	str r1, [r0]
+
+
 	@ prepare for change
 	cmp	r5, #24
 	bgt	2f
 	bl	mx23_ram_24M_set_timings
-	b	100f
+	b	44f
 2:	cmp	r5, #48
 	bgt	3f
 	bl	mx23_ram_48M_set_timings
-	b	100f
+	b	55f
 3:	cmp	r5, #60
 	bgt	4f
 	bl	mx23_ram_60M_set_timings
-	b	100f
+	b	55f
 4:	cmp	r5, #80
 	bgt	5f
 	bl	mx23_ram_80M_set_timings
-	b	100f
+	b	55f
 5:	cmp	r5, #96
 	bgt	6f
 	bl	mx23_ram_96M_set_timings
-	b	100f
+	b	55f
 6:	cmp	r5, #120
 	bgt	7f
 	bl	mx23_ram_120M_set_timings
-	b	100f
+	b	55f
 7:	cmp     r5, #133
 	bgt	8f
 	bl	mx23_ram_133M_set_timings
-	b	100f
+	b	55f
 8:	bl	mx23_ram_150M_set_timings
 
-100:
-	@ RAM to clk from xtal
-	mov	r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x000000FF)
-	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x0000FF00)
-	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x00FF0000)
-	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0xFF000000)
-	mov	r1, #(1<<6)
-	str	r1, [r0, #4]
-	mov	r0, #(HW_CLKCTRL_EMI_ADDR & 0x000000FF)
-	orr	r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0x0000FF00)
-	orr	r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0x00FF0000)
-	orr	r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0xFF000000)
-101:	ldr     r1, [r0]
-	tst     r1, #BM_CLKCTRL_EMI_BUSY_REF_XTAL
-	bne     101b
 
+44:
+
+	bl	__mx23_emi_set_values_xtal
+
+	@ resttore normal DRAM mode
+        ldr     r0, __mx23_dram_ctl00
+        ldr     r1, [r0, #0x20]
+        bic     r1, r1, #(1 << 8)
+        str     r1, [r0, #0x20]
+
+        @ wait for it to actually happen
+        ldr     r0, __mx23_dram_emi00
+99:    	ldr     r1, [r0, #0x10]
+        tst     r1, #(1 << 1)
+        bne     99b
+        b		110f
+
+55:
 	@When are using the DLL, reset the DRAM controller and DLL
 	@start point logic (via DLL_SHIFT_RESET and DLL_RESET).
 	@After changing clock dividers and loading
@@ -136,14 +167,15 @@ ENTRY(mxs_ram_freq_scale)
 	orr r1, r1, #BM_EMI_CTRL_DLL_RESET
 	str     r1, [r0]            @write back values to HW_EMI_CTRL register.
 
-	bl	__mx23_emi_set_values
+	bl __mx23_emi_set_values2
 
 	@ EMI back to PLL
 	mov	r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x000000FF)
 	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x0000FF00)
 	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0x00FF0000)
 	orr	r0, r0, #(HW_CLKCTRL_CLKSEQ_ADDR & 0xFF000000)
-	mov	r1, #(1<<6)
+	mov	r1, #(BM_CLKCTRL_CLKSEQ_BYPASS_EMI)
+	@clear bypass bit
 	str	r1, [r0, #8]
 
 	@ Wait for BUSY_REF_EMI, to assure new clock dividers
@@ -179,16 +211,6 @@ ENTRY(mxs_ram_freq_scale)
 	bic r1, #BM_EMI_CTRL_DLL_RESET
 	str     r1, [r0]
 
-@Wait for BUSY_REF_EMI, to assure new clock dividers are done transferring.
-@(\todo is that necessary.  we already did this above.
-	mov     r0,     #(HW_CLKCTRL_EMI_ADDR & 0x000000FF)
-	orr     r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0x0000FF00)
-	orr     r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0x00FF0000)
-	orr     r0, r0, #(HW_CLKCTRL_EMI_ADDR & 0xFF000000)
-66:	ldr     r1, [r0]
-	tst     r1, #BM_CLKCTRL_EMI_BUSY_REF_EMI
-	bne     66b
-
 @ Wait for DLL locking.
 @        while(HW_DRAM_CTL04.B.DLLLOCKREG==0);
 
@@ -200,7 +222,7 @@ ENTRY(mxs_ram_freq_scale)
 	tst     r1, #BM_DRAM_CTL04_DLLLOCKREG
 	beq     77b
 
-
+88:
 	@ resttore normal DRAM mode
         ldr     r0, __mx23_dram_ctl00
         ldr     r1, [r0, #0x20]
@@ -213,6 +235,7 @@ ENTRY(mxs_ram_freq_scale)
         tst     r1, #(1 << 1)
         bne     102b
 
+110:
 @ restore regs and return
 	ldmfd   sp!, {r1 - r9, lr}
 	mov	pc, lr
diff --git a/arch/arm/mach-mx23/emi.inc b/arch/arm/mach-mx23/emi.inc
index 194181f..290d35e 100644
--- a/arch/arm/mach-mx23/emi.inc
+++ b/arch/arm/mach-mx23/emi.inc
@@ -20,15 +20,38 @@
  * with this program; if not, write to the Free Software Foundation, Inc.,
  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
-__mx23_emi_set_values:
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+
+__mx23_emi_set_values_xtal:
 	stmfd	r9!, {r0 - r4, lr}
+
 	mov	r1, #(HW_CLKCTRL_EMI_ADDR & 0x000000FF)
 	orr	r1, r1, #(HW_CLKCTRL_EMI_ADDR & 0x0000FF00)
 	orr	r1, r1, #(HW_CLKCTRL_EMI_ADDR & 0x00FF0000)
 	orr	r1, r1, #(HW_CLKCTRL_EMI_ADDR & 0xFF000000)
 
-@	DDC_RESNCY is deprecated at mx23
-@	mov	r3, #BM_CLKCTRL_EMI_DCC_RESYNC_ENABLE
+32:	ldr	r4, [r1]
+	tst	r4, #BM_CLKCTRL_EMI_BUSY_REF_XTAL
+	bne	32b
+	b	4f
+
+__mx23_emi_set_values2:
+
+	stmfd	r9!, {r0 - r4, lr}
+
+	mov	r1, #(HW_CLKCTRL_EMI_ADDR & 0x000000FF)
+	orr	r1, r1, #(HW_CLKCTRL_EMI_ADDR & 0x0000FF00)
+	orr	r1, r1, #(HW_CLKCTRL_EMI_ADDR & 0x00FF0000)
+	orr	r1, r1, #(HW_CLKCTRL_EMI_ADDR & 0xFF000000)
 
 	mov	r0, #(HW_CLKCTRL_FRAC_ADDR & 0x000000FF)
 	orr	r0, r0, #(HW_CLKCTRL_FRAC_ADDR & 0x0000FF00)
@@ -36,17 +59,34 @@ __mx23_emi_set_values:
 	orr	r0, r0, #(HW_CLKCTRL_FRAC_ADDR & 0xFF000000)
 	ldr	r2, [r0]
 
-	and	r4, r2, #BM_CLKCTRL_FRAC_EMIFRAC
-	lsr	r4, r4, #8
-	/* new pll div > cur pll div? */
-	cmp	r4, r8
-	bgt	1f
+	@clear EMIFRAC bits and store result in r4
 	bic	r4, r2, #BM_CLKCTRL_FRAC_EMIFRAC
-	orr	r4, r4, r8, lsl #8
-	str	r4, [r0]
-	nop
-	nop
-	nop
+
+	orr 	r4, r4, r8, lsl #BP_CLKCTRL_FRAC_EMIFRAC
+	str 	r4, [r0]
+
+	@ ungate ref_emi
+	mov	r0, #(HW_CLKCTRL_FRAC_CLR_ADDR & 0x000000FF)
+	orr	r0, r0, #(HW_CLKCTRL_FRAC_CLR_ADDR & 0x0000FF00)
+	orr	r0, r0, #(HW_CLKCTRL_FRAC_CLR_ADDR & 0x00FF0000)
+	orr	r0, r0, #(HW_CLKCTRL_FRAC_CLR_ADDR & 0xFF000000)
+
+	mov r2, #(BM_CLKCTRL_FRAC_CLKGATEEMI)
+	str r2, [r0]
+
+
+	@ set the integer divider
+	ldr r2, [r1]
+	bic r2, r2, #BM_CLKCTRL_EMI_DIV_EMI
+	orr r2, r2, r7, lsl #BP_CLKCTRL_EMI_DIV_EMI
+
+	str r2, [r1]
+
+	@ wait for clock to stabilize
+50:	ldr	r2, [r1]
+	tst	r2, #BM_CLKCTRL_EMI_BUSY_REF_EMI
+	bne	50b
+	b 4f
 
 @ Change integer/fractional dividers.
 
@@ -103,8 +143,6 @@ __mx23_emi_set_values:
 31:	ldr	r4, [r1]
 	tst	r4, #BM_CLKCTRL_EMI_BUSY_REF_EMI
 	bne	31b
-	tst	r4, #BM_CLKCTRL_EMI_BUSY_REF_XTAL
-	bne	31b
 
 4:	ldmfd	r9!, {r0 - r4, lr}
 	mov	pc, lr
-- 
1.5.4.4

