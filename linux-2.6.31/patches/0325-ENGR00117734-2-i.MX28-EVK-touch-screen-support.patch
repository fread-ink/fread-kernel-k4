From 33403c27c8b43da4d0b305ff5ba9e59ee60a7160 Mon Sep 17 00:00:00 2001
From: Fred Fan <r01011@freescale.com>
Date: Fri, 29 Jan 2010 10:31:49 +0800
Subject: [PATCH] ENGR00117734-2 i.MX28 EVK touch screen support

Add platform support

Signed-off-by: Fred.fan <r01011@freescale.com
---
 arch/arm/mach-mx28/device.c             |   53 ++++++
 arch/arm/plat-mxs/device.c              |   19 ++
 arch/arm/plat-mxs/include/mach/device.h |   15 ++
 drivers/input/touchscreen/Makefile      |    1 +
 drivers/input/touchscreen/mxs-ts.c      |  302 +++++++++++++++++-------------
 5 files changed, 259 insertions(+), 131 deletions(-)

diff --git a/arch/arm/mach-mx28/device.c b/arch/arm/mach-mx28/device.c
index d26d693..9a526bd 100644
--- a/arch/arm/mach-mx28/device.c
+++ b/arch/arm/mach-mx28/device.c
@@ -662,6 +662,58 @@ static void __init mx28_init_kbd(void)
 }
 #endif
 
+#if defined(CONFIG_TOUCHSCREEN_MXS) || defined(CONFIG_TOUCHSCREEN_MXS_MODULE)
+static struct mxs_touchscreen_plat_data mx28_ts_data = {
+	.x_plus_chan = LRADC_TOUCH_X_PLUS,
+	.x_minus_chan = LRADC_TOUCH_X_MINUS,
+	.y_plus_chan = LRADC_TOUCH_Y_PLUS,
+	.y_minus_chan = LRADC_TOUCH_Y_MINUS,
+	.x_plus_val = BM_LRADC_CTRL0_XPULSW,
+	.x_minus_val = BF_LRADC_CTRL0_XNURSW(2),
+	.y_plus_val = BF_LRADC_CTRL0_YPLLSW(1),
+	.y_minus_val = BM_LRADC_CTRL0_YNLRSW,
+	.x_plus_mask = BM_LRADC_CTRL0_XPULSW,
+	.x_minus_mask = BM_LRADC_CTRL0_XNURSW,
+	.y_plus_mask = BM_LRADC_CTRL0_YPLLSW,
+	.y_minus_mask = BM_LRADC_CTRL0_YNLRSW,
+};
+
+static struct resource mx28_ts_res[] = {
+	{
+	 .flags = IORESOURCE_MEM,
+	 .start = LRADC_PHYS_ADDR,
+	 .end   = LRADC_PHYS_ADDR + 0x2000 - 1,
+	 },
+	{
+	 .flags = IORESOURCE_IRQ,
+	 .start = IRQ_LRADC_TOUCH,
+	 .end   = IRQ_LRADC_TOUCH,
+	 },
+	{
+	 .flags = IORESOURCE_IRQ,
+	 .start = IRQ_LRADC_CH5,
+	 .end   = IRQ_LRADC_CH5,
+	 },
+};
+
+static void __init mx28_init_ts(void)
+{
+	struct platform_device *pdev;
+
+	pdev = mxs_get_device("mxs-ts", 0);
+	if (pdev == NULL || IS_ERR(pdev))
+		return;
+	pdev->resource = mx28_ts_res;
+	pdev->num_resources = ARRAY_SIZE(mx28_ts_res);
+	pdev->dev.platform_data = &mx28_ts_data;
+	mxs_add_device(pdev, 3);
+}
+#else
+static void __init mx28_init_ts(void)
+{
+	;
+}
+#endif
 int __init mx28_device_init(void)
 {
 	mx28_init_dma();
@@ -673,6 +725,7 @@ int __init mx28_device_init(void)
 	mx28_init_rtc();
 	mx28_init_fec();
 	mx28_init_kbd();
+	mx28_init_ts();
 	return 0;
 }
 
diff --git a/arch/arm/plat-mxs/device.c b/arch/arm/plat-mxs/device.c
index 7fd8b3a..ecac925 100644
--- a/arch/arm/plat-mxs/device.c
+++ b/arch/arm/plat-mxs/device.c
@@ -226,6 +226,16 @@ static struct platform_device mxs_kbd = {
 };
 #endif
 
+#if defined(CONFIG_TOUCHSCREEN_MXS) || defined(CONFIG_TOUCHSCREEN_MXS_MODULE)
+static struct platform_device mxs_ts = {
+	.name = "mxs-ts",
+	.id = 0,
+	.dev = {
+		.release = mxs_nop_release,
+		},
+};
+#endif
+
 static struct mxs_dev_lookup dev_lookup[] = {
 #if defined(CONFIG_SERIAL_MXS_DUART) || \
 	defined(CONFIG_SERIAL_MXS_DUART_MODULE)
@@ -309,6 +319,15 @@ static struct mxs_dev_lookup dev_lookup[] = {
 	 .pdev = &mxs_kbd,
 	 },
 #endif
+
+#if defined(CONFIG_TOUCHSCREEN_MXS) || defined(CONFIG_TOUCHSCREEN_MXS_MODULE)
+	{
+	 .name = "mxs-ts",
+	 .size = 1,
+	 .pdev = &mxs_ts,
+	},
+#endif
+
 };
 
 struct platform_device *mxs_get_device(char *name, int id)
diff --git a/arch/arm/plat-mxs/include/mach/device.h b/arch/arm/plat-mxs/include/mach/device.h
index 05230f2..40a5a5c 100644
--- a/arch/arm/plat-mxs/include/mach/device.h
+++ b/arch/arm/plat-mxs/include/mach/device.h
@@ -72,6 +72,21 @@ struct mxs_kbd_plat_data {
 	int channel;
 };
 
+struct mxs_touchscreen_plat_data {
+	u8 x_plus_chan;
+	u8 x_minus_chan;
+	u8 y_plus_chan;
+	u8 y_minus_chan;
+	unsigned int x_plus_val;
+	unsigned int x_minus_val;
+	unsigned int y_plus_val;
+	unsigned int y_minus_val;
+	unsigned int x_plus_mask;
+	unsigned int x_minus_mask;
+	unsigned int y_plus_mask;
+	unsigned int y_minus_mask;
+};
+
 extern void mxs_timer_init(struct mxs_sys_timer *timer);
 
 extern void mxs_nop_release(struct device *dev);
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index bbe22e7..0558970 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -26,6 +26,7 @@ obj-$(CONFIG_TOUCHSCREEN_HTCPEN)	+= htcpen.o
 obj-$(CONFIG_TOUCHSCREEN_MXC)		+= mxc_ts.o
 obj-$(CONFIG_TOUCHSCREEN_IMX_ADC)	+= imx_adc_ts.o
 obj-$(CONFIG_TOUCHSCREEN_STMP3XXX)	+= stmp3xxx_ts.o
+obj-$(CONFIG_TOUCHSCREEN_MXS)		+= mxs-ts.o
 obj-$(CONFIG_TOUCHSCREEN_USB_COMPOSITE)	+= usbtouchscreen.o
 obj-$(CONFIG_TOUCHSCREEN_PENMOUNT)	+= penmount.o
 obj-$(CONFIG_TOUCHSCREEN_TOUCHIT213)	+= touchit213.o
diff --git a/drivers/input/touchscreen/mxs-ts.c b/drivers/input/touchscreen/mxs-ts.c
index 4858667..a2ea102 100644
--- a/drivers/input/touchscreen/mxs-ts.c
+++ b/drivers/input/touchscreen/mxs-ts.c
@@ -1,5 +1,5 @@
 /*
- * Freesclae STMP37XX/STMP378X Touchscreen driver
+ * Freesclae MXS Touchscreen driver
  *
  * Author: Vitaly Wool <vital@embeddedalley.com>
  *
@@ -15,7 +15,6 @@
  * http://www.opensource.org/licenses/gpl-license.html
  * http://www.gnu.org/copyleft/gpl.html
  */
-/* #define DEBUG*/
 
 #include <linux/kernel.h>
 #include <linux/device.h>
@@ -26,14 +25,29 @@
 
 #include <mach/lradc.h>
 #include <mach/hardware.h>
-#include <mach/platform.h>
+#include <mach/device.h>
 #include <mach/regs-lradc.h>
 
 #define TOUCH_DEBOUNCE_TOLERANCE	100
 
-struct stmp3xxx_ts_info {
+struct mxs_ts_info {
 	int touch_irq;
 	int device_irq;
+	unsigned int base;
+	u8 x_plus_chan;
+	u8 x_minus_chan;
+	u8 y_plus_chan;
+	u8 y_minus_chan;
+
+	unsigned int x_plus_val;
+	unsigned int x_minus_val;
+	unsigned int y_plus_val;
+	unsigned int y_minus_val;
+	unsigned int x_plus_mask;
+	unsigned int x_minus_mask;
+	unsigned int y_plus_mask;
+	unsigned int y_minus_mask;
+
 	struct input_dev *idev;
 	enum {
 		TS_STATE_DISABLED,
@@ -47,112 +61,92 @@ struct stmp3xxx_ts_info {
 	int sample_count;
 };
 
-static inline void enter_state_touch_detect(struct stmp3xxx_ts_info *info)
+static inline void enter_state_touch_detect(struct mxs_ts_info *info)
 {
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(2));
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(3));
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(4));
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(5));
-	__raw_writel(BM_LRADC_CTRL1_LRADC5_IRQ,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->x_plus_chan));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->y_plus_chan));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->x_minus_chan));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->y_minus_chan));
+
+	__raw_writel(BM_LRADC_CTRL1_LRADC0_IRQ << info->y_minus_chan,
+		     info->base + HW_LRADC_CTRL1_CLR);
 	__raw_writel(BM_LRADC_CTRL1_TOUCH_DETECT_IRQ,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+		     info->base + HW_LRADC_CTRL1_CLR);
 	/*
 	 * turn off the yplus and yminus pullup and pulldown, and turn off touch
 	 * detect (enables yminus, and xplus through a resistor.On a press,
 	 * xplus is pulled down)
 	 */
-	__raw_writel(BM_LRADC_CTRL0_YMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_YPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
 	__raw_writel(BM_LRADC_CTRL0_TOUCH_DETECT_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
-
+		     info->base + HW_LRADC_CTRL0_SET);
 	hw_lradc_set_delay_trigger_kick(LRADC_DELAY_TRIGGER_TOUCHSCREEN, 0);
 	info->state = TS_STATE_TOUCH_DETECT;
 	info->sample_count = 0;
 }
 
-static inline void enter_state_disabled(struct stmp3xxx_ts_info *info)
+static inline void enter_state_disabled(struct mxs_ts_info *info)
 {
-	__raw_writel(BM_LRADC_CTRL0_YMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_YPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
 	__raw_writel(BM_LRADC_CTRL0_TOUCH_DETECT_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-
+		     info->base + HW_LRADC_CTRL0_CLR);
 	hw_lradc_set_delay_trigger_kick(LRADC_DELAY_TRIGGER_TOUCHSCREEN, 0);
 	info->state = TS_STATE_DISABLED;
 	info->sample_count = 0;
 }
 
 
-static inline void enter_state_x_plane(struct stmp3xxx_ts_info *info)
+static inline void enter_state_x_plane(struct mxs_ts_info *info)
 {
-	__raw_writel(BM_LRADC_CTRL0_YMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
-	__raw_writel(BM_LRADC_CTRL0_YPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
-	__raw_writel(BM_LRADC_CTRL0_XMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_plus_val, info->base + HW_LRADC_CTRL0_SET);
+	__raw_writel(info->y_minus_val, info->base + HW_LRADC_CTRL0_SET);
+	__raw_writel(info->x_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
 	__raw_writel(BM_LRADC_CTRL0_TOUCH_DETECT_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-
+		     info->base + HW_LRADC_CTRL0_CLR);
 	hw_lradc_set_delay_trigger_kick(LRADC_DELAY_TRIGGER_TOUCHSCREEN, 1);
 
 	info->state = TS_STATE_X_PLANE;
 	info->sample_count = 0;
 }
 
-static inline void enter_state_y_plane(struct stmp3xxx_ts_info *info)
+static inline void enter_state_y_plane(struct mxs_ts_info *info)
 {
-	__raw_writel(BM_LRADC_CTRL0_YMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_YPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
-	__raw_writel(BM_LRADC_CTRL0_XPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
+	__raw_writel(info->y_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_plus_val, info->base + HW_LRADC_CTRL0_SET);
+	__raw_writel(info->x_minus_val, info->base + HW_LRADC_CTRL0_SET);
 	__raw_writel(BM_LRADC_CTRL0_TOUCH_DETECT_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-
+		     info->base + HW_LRADC_CTRL0_CLR);
 	hw_lradc_set_delay_trigger_kick(LRADC_DELAY_TRIGGER_TOUCHSCREEN, 1);
 	info->state = TS_STATE_Y_PLANE;
 	info->sample_count = 0;
 }
 
-static inline void enter_state_touch_verify(struct stmp3xxx_ts_info *info)
+static inline void enter_state_touch_verify(struct mxs_ts_info *info)
 {
-	__raw_writel(BM_LRADC_CTRL0_YMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_YPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XMINUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
-	__raw_writel(BM_LRADC_CTRL0_XPLUS_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->y_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_plus_mask, info->base + HW_LRADC_CTRL0_CLR);
+	__raw_writel(info->x_minus_mask, info->base + HW_LRADC_CTRL0_CLR);
 	__raw_writel(BM_LRADC_CTRL0_TOUCH_DETECT_ENABLE,
-		REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
-
+		     info->base + HW_LRADC_CTRL0_SET);
 	info->state = TS_STATE_TOUCH_VERIFY;
 	hw_lradc_set_delay_trigger_kick(LRADC_DELAY_TRIGGER_TOUCHSCREEN, 1);
 	info->sample_count = 0;
 }
 
-static void process_lradc(struct stmp3xxx_ts_info *info, u16 x, u16 y,
+static void process_lradc(struct mxs_ts_info *info, u16 x, u16 y,
 			int pressure)
 {
 	switch (info->state) {
@@ -229,23 +223,26 @@ static void process_lradc(struct stmp3xxx_ts_info *info, u16 x, u16 y,
 
 static irqreturn_t ts_handler(int irq, void *dev_id)
 {
-	struct stmp3xxx_ts_info *info = dev_id;
+	struct mxs_ts_info *info = dev_id;
 	u16 x_plus, y_plus;
 	int pressure = 0;
 
 	if (irq == info->touch_irq)
 		__raw_writel(BM_LRADC_CTRL1_TOUCH_DETECT_IRQ,
-			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+			     info->base + HW_LRADC_CTRL1_CLR);
 	else if (irq == info->device_irq)
-		__raw_writel(BM_LRADC_CTRL1_LRADC5_IRQ,
-			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+		__raw_writel(BM_LRADC_CTRL1_LRADC0_IRQ << info->y_minus_chan,
+			     info->base + HW_LRADC_CTRL1_CLR);
 
 	/* get x, y values */
-	x_plus = __raw_readl(REGS_LRADC_BASE + HW_LRADC_CHn(LRADC_TOUCH_X_PLUS)) & BM_LRADC_CHn_VALUE;
-	y_plus = __raw_readl(REGS_LRADC_BASE + HW_LRADC_CHn(LRADC_TOUCH_Y_PLUS)) & BM_LRADC_CHn_VALUE;
+	x_plus = __raw_readl(info->base + HW_LRADC_CHn(info->x_plus_chan)) &
+		BM_LRADC_CHn_VALUE;
+	y_plus = __raw_readl(info->base + HW_LRADC_CHn(info->y_plus_chan)) &
+		BM_LRADC_CHn_VALUE;
 
 	/* pressed? */
-	if (__raw_readl(REGS_LRADC_BASE + HW_LRADC_STATUS) & BM_LRADC_STATUS_TOUCH_DETECT_RAW)
+	if (__raw_readl(info->base + HW_LRADC_STATUS) &
+	    BM_LRADC_STATUS_TOUCH_DETECT_RAW)
 		pressure = 1;
 
 	pr_debug("%s: irq %d, x_plus %d, y_plus %d, pressure %d\n",
@@ -256,21 +253,29 @@ static irqreturn_t ts_handler(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static int stmp3xxx_ts_probe(struct platform_device *pdev)
+static int __devinit mxs_ts_probe(struct platform_device *pdev)
 {
 	struct input_dev *idev;
-	struct stmp3xxx_ts_info *info;
+	struct mxs_ts_info *info;
 	int ret = 0;
 	struct resource *res;
+	struct mxs_touchscreen_plat_data *plat_data;
+
+	plat_data = (struct mxs_touchscreen_plat_data *)pdev->dev.platform_data;
+	if (plat_data == NULL)
+		return -ENODEV;
 
 	idev = input_allocate_device();
-	info = kzalloc(sizeof(struct stmp3xxx_ts_info), GFP_KERNEL);
-	if (idev == NULL || info == NULL) {
+	if (idev == NULL)
+		return -ENOMEM;
+
+	info = kzalloc(sizeof(struct mxs_ts_info), GFP_KERNEL);
+	if (info == NULL) {
 		ret = -ENOMEM;
-		goto out_nomem;
+		goto out_nomem_info;
 	}
 
-	idev->name = "STMP3XXX touchscreen";
+	idev->name = "MXS touchscreen";
 	idev->evbit[0] = BIT(EV_ABS);
 	input_set_abs_params(idev, ABS_X, 0, 0xFFF, 0, 0);
 	input_set_abs_params(idev, ABS_Y, 0, 0xFFF, 0, 0);
@@ -281,7 +286,26 @@ static int stmp3xxx_ts_probe(struct platform_device *pdev)
 		goto out_nomem;
 
 	info->idev = idev;
-
+	info->x_plus_chan = plat_data->x_plus_chan;
+	info->x_minus_chan = plat_data->x_minus_chan;
+	info->y_plus_chan = plat_data->y_plus_chan;
+	info->y_minus_chan = plat_data->y_minus_chan;
+	info->x_plus_val = plat_data->x_plus_val;
+	info->x_minus_val = plat_data->x_minus_val;
+	info->y_plus_val = plat_data->y_plus_val;
+	info->y_minus_val = plat_data->y_minus_val;
+	info->x_plus_mask = plat_data->x_plus_mask;
+	info->x_minus_mask = plat_data->x_minus_mask;
+	info->y_plus_mask = plat_data->y_plus_mask;
+	info->y_minus_mask = plat_data->y_minus_mask;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		printk(KERN_ERR "%s: couldn't get MEM resource\n", __func__);
+		ret = -ENODEV;
+		goto out_nodev;
+	}
+	info->base = (unsigned int)IO_ADDRESS(res->start);
 	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
 	if (!res) {
 		printk(KERN_ERR "%s: couldn't get IRQ resource\n", __func__);
@@ -299,42 +323,49 @@ static int stmp3xxx_ts_probe(struct platform_device *pdev)
 	info->device_irq = res->start;
 
 	ret = request_irq(info->touch_irq, ts_handler, IRQF_DISABLED,
-				"stmp3xxx_ts_touch", info);
+				"mxs_ts_touch", info);
 	if (ret)
 		goto out_nodev;
 
 	ret = request_irq(info->device_irq, ts_handler, IRQF_DISABLED,
-				"stmp3xxx_ts_dev", info);
+				"mxs_ts_dev", info);
 	if (ret) {
 		free_irq(info->touch_irq, info);
 		goto out_nodev;
 	}
 	enter_state_touch_detect(info);
 
-	hw_lradc_use_channel(LRADC_CH2);
-	hw_lradc_use_channel(LRADC_CH3);
-	hw_lradc_use_channel(LRADC_CH5);
-	hw_lradc_configure_channel(LRADC_CH2, 0, 0, 0);
-	hw_lradc_configure_channel(LRADC_CH3, 0, 0, 0);
-	hw_lradc_configure_channel(LRADC_CH5, 0, 0, 0);
+	hw_lradc_use_channel(info->x_plus_chan);
+	hw_lradc_use_channel(info->x_minus_chan);
+	hw_lradc_use_channel(info->y_plus_chan);
+	hw_lradc_use_channel(info->y_minus_chan);
+	hw_lradc_configure_channel(info->x_plus_chan, 0, 0, 0);
+	hw_lradc_configure_channel(info->x_minus_chan, 0, 0, 0);
+	hw_lradc_configure_channel(info->y_plus_chan, 0, 0, 0);
+	hw_lradc_configure_channel(info->y_minus_chan, 0, 0, 0);
 
 	/* Clear the accumulator & NUM_SAMPLES for the channels */
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(LRADC_CH2));
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(LRADC_CH3));
-	__raw_writel(0xFFFFFFFF, REGS_LRADC_BASE + HW_LRADC_CHn_CLR(LRADC_CH5));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->x_plus_chan));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->x_minus_chan));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->y_plus_chan));
+	__raw_writel(0xFFFFFFFF,
+		     info->base + HW_LRADC_CHn_CLR(info->y_minus_chan));
 
 	hw_lradc_set_delay_trigger(LRADC_DELAY_TRIGGER_TOUCHSCREEN,
 			0x3c, 0, 0, 8);
 
-	__raw_writel(BM_LRADC_CTRL1_LRADC5_IRQ,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+	__raw_writel(BM_LRADC_CTRL1_LRADC0_IRQ << info->y_minus_chan,
+		     info->base + HW_LRADC_CTRL1_CLR);
 	__raw_writel(BM_LRADC_CTRL1_TOUCH_DETECT_IRQ,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+		     info->base + HW_LRADC_CTRL1_CLR);
 
-	__raw_writel(BM_LRADC_CTRL1_LRADC5_IRQ_EN,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_SET);
+	__raw_writel(BM_LRADC_CTRL1_LRADC0_IRQ_EN << info->y_minus_chan,
+		     info->base + HW_LRADC_CTRL1_SET);
 	__raw_writel(BM_LRADC_CTRL1_TOUCH_DETECT_IRQ_EN,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_SET);
+		     info->base + HW_LRADC_CTRL1_SET);
 
 	platform_set_drvdata(pdev, info);
 	device_init_wakeup(&pdev->dev, 1);
@@ -343,25 +374,28 @@ static int stmp3xxx_ts_probe(struct platform_device *pdev)
 out_nodev:
 	input_free_device(idev);
 out_nomem:
-	kfree(idev);
 	kfree(info);
+out_nomem_info:
+	kfree(idev);
 out:
 	return ret;
 }
 
-static int stmp3xxx_ts_remove(struct platform_device *pdev)
+static int __devexit mxs_ts_remove(struct platform_device *pdev)
 {
-	struct stmp3xxx_ts_info *info = platform_get_drvdata(pdev);
+	struct mxs_ts_info *info = platform_get_drvdata(pdev);
 
 	platform_set_drvdata(pdev, NULL);
 
-	hw_lradc_unuse_channel(LRADC_CH2);
-	hw_lradc_unuse_channel(LRADC_CH3);
-	hw_lradc_unuse_channel(LRADC_CH5);
-	__raw_writel(BM_LRADC_CTRL1_LRADC5_IRQ_EN,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+	hw_lradc_unuse_channel(info->x_plus_chan);
+	hw_lradc_unuse_channel(info->x_minus_chan);
+	hw_lradc_unuse_channel(info->y_plus_chan);
+	hw_lradc_unuse_channel(info->y_minus_chan);
+
+	__raw_writel(BM_LRADC_CTRL1_LRADC0_IRQ_EN << info->y_minus_chan,
+		     info->base + HW_LRADC_CTRL1_CLR);
 	__raw_writel(BM_LRADC_CTRL1_TOUCH_DETECT_IRQ_EN,
-		REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+		     info->base + HW_LRADC_CTRL1_CLR);
 
 	free_irq(info->device_irq, info);
 	free_irq(info->touch_irq, info);
@@ -373,50 +407,56 @@ static int stmp3xxx_ts_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static int stmp3xxx_ts_suspend(struct platform_device *pdev,
+#ifdef CONFIG_PM
+static int mxs_ts_suspend(struct platform_device *pdev,
 				pm_message_t state)
 {
-#ifdef CONFIG_PM
+	struct mxs_ts_info *info = platform_get_drvdata(pdev);
+
 	if (!device_may_wakeup(&pdev->dev)) {
-		hw_lradc_unuse_channel(LRADC_CH2);
-		hw_lradc_unuse_channel(LRADC_CH3);
-		hw_lradc_unuse_channel(LRADC_CH5);
+		hw_lradc_unuse_channel(info->x_plus_chan);
+		hw_lradc_unuse_channel(info->x_minus_chan);
+		hw_lradc_unuse_channel(info->y_plus_chan);
+		hw_lradc_unuse_channel(info->y_minus_chan);
 	}
-#endif
 	return 0;
 }
 
-static int stmp3xxx_ts_resume(struct platform_device *pdev)
+static int mxs_ts_resume(struct platform_device *pdev)
 {
-#ifdef CONFIG_PM
+	struct mxs_ts_info *info = platform_get_drvdata(pdev);
+
 	if (!device_may_wakeup(&pdev->dev)) {
-		hw_lradc_use_channel(LRADC_CH2);
-		hw_lradc_use_channel(LRADC_CH3);
-		hw_lradc_use_channel(LRADC_CH5);
+		hw_lradc_use_channel(info->x_plus_chan);
+		hw_lradc_use_channel(info->x_minus_chan);
+		hw_lradc_use_channel(info->y_plus_chan);
+		hw_lradc_use_channel(info->y_minus_chan);
 	}
-#endif
 	return 0;
 }
+#endif
 
-static struct platform_driver stmp3xxx_ts_driver = {
-	.probe		= stmp3xxx_ts_probe,
-	.remove		= stmp3xxx_ts_remove,
-	.suspend	= stmp3xxx_ts_suspend,
-	.resume		= stmp3xxx_ts_resume,
+static struct platform_driver mxs_ts_driver = {
+	.probe		= mxs_ts_probe,
+	.remove		= __devexit_p(mxs_ts_remove),
+#ifdef CONFIG_PM
+	.suspend	= mxs_ts_suspend,
+	.resume		= mxs_ts_resume,
+#endif
 	.driver		= {
-		.name		= "stmp3xxx_ts",
+		.name	= "mxs-ts",
 	},
 };
 
-static int __init stmp3xxx_ts_init(void)
+static int __init mxs_ts_init(void)
 {
-	return platform_driver_register(&stmp3xxx_ts_driver);
+	return platform_driver_register(&mxs_ts_driver);
 }
 
-static void __exit stmp3xxx_ts_exit(void)
+static void __exit mxs_ts_exit(void)
 {
-	platform_driver_unregister(&stmp3xxx_ts_driver);
+	platform_driver_unregister(&mxs_ts_driver);
 }
 
-module_init(stmp3xxx_ts_init);
-module_exit(stmp3xxx_ts_exit);
+module_init(mxs_ts_init);
+module_exit(mxs_ts_exit);
-- 
1.5.4.4

