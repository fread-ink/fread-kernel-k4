From 2992c41e60c652b97468098bb47d3875d874c83d Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Fri, 4 Jun 2010 11:24:42 +0800
Subject: [PATCH] ENGR00124023 v4l2 output:modify the operation of ic-bypass mode

/unit_test//unit_tests/mxc_v4l2_output.out -iw 1920 -ih 1080 -ow 1920
-oh 1080 -d 3 -l 600 -fr 80 /dev/shm/1920_1080_E18_c2.yuv

Error information:
It report the following error:
video4linux video16: unable to update buffer 0 address rc=-13

Fix above issue by modify the operation of ic-bypass mode.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 drivers/media/video/mxc/output/mxc_v4l2_output.c |   76 ++++++++++++++--------
 drivers/mxc/ipu/ipu_common.c                     |   32 +++++++++
 drivers/mxc/ipu3/ipu_common.c                    |   32 +++++++++
 include/linux/ipu.h                              |    2 +
 4 files changed, 114 insertions(+), 28 deletions(-)

diff --git a/drivers/media/video/mxc/output/mxc_v4l2_output.c b/drivers/media/video/mxc/output/mxc_v4l2_output.c
index 49dcaee..99e26a1 100644
--- a/drivers/media/video/mxc/output/mxc_v4l2_output.c
+++ b/drivers/media/video/mxc/output/mxc_v4l2_output.c
@@ -260,6 +260,9 @@ static int select_display_buffer(vout_data *vout, int next_buf)
 			!= next_buf)
 		ret = ipu_select_buffer(vout->display_ch, IPU_INPUT_BUFFER,
 				next_buf);
+	else
+		dev_dbg(&vout->video_dev->dev,
+			"display buffer not ready for select\n");
 	return ret;
 }
 
@@ -297,13 +300,32 @@ static int wait_for_disp_vsync(vout_data *vout)
 	mm_segment_t old_fs;
 	int ret = 0;
 
-	/* wait for display frame finish */
-	if (fbi->fbops->fb_ioctl) {
-		old_fs = get_fs();
-		set_fs(KERNEL_DS);
-		ret = fbi->fbops->fb_ioctl(fbi, MXCFB_WAIT_FOR_VSYNC,
-			(unsigned int)NULL);
-		set_fs(old_fs);
+	if (vout->ic_bypass) {
+		if (ipu_check_buffer_busy(vout->display_ch,
+					IPU_INPUT_BUFFER, vout->next_done_ipu_buf)) {
+			/* wait for display frame finish */
+			if (fbi->fbops->fb_ioctl) {
+				old_fs = get_fs();
+				set_fs(KERNEL_DS);
+				ret = fbi->fbops->fb_ioctl(fbi, MXCFB_WAIT_FOR_VSYNC,
+						(unsigned int)NULL);
+				set_fs(old_fs);
+			}
+		}
+	} else {
+		/* wait for display frame finish */
+		if (fbi->fbops->fb_ioctl) {
+			old_fs = get_fs();
+			set_fs(KERNEL_DS);
+			ret = fbi->fbops->fb_ioctl(fbi, MXCFB_WAIT_FOR_VSYNC,
+					(unsigned int)NULL);
+			set_fs(old_fs);
+		}
+	}
+	if (ret < 0) {
+		/* ic_bypass need clear display buffer ready for next update*/
+		ipu_clear_buffer_ready(vout->display_ch, IPU_INPUT_BUFFER,
+				vout->next_done_ipu_buf);
 	}
 	return ret;
 }
@@ -318,18 +340,20 @@ static void timer_work_func(struct work_struct *work)
 
 	/* wait 2 first frame finish for ic bypass mode*/
 	if ((g_buf_output_cnt == 0) && vout->ic_bypass) {
-		wait_for_disp_vsync(vout);
-		wait_for_disp_vsync(vout);
+		int i;
+
+		for (i = 0; i < 2; i++) {
+			wait_for_disp_vsync(vout);
+			spin_lock_irqsave(&g_lock, lock_flags);
+			last_buf = vout->ipu_buf[i];
+			vout->v4l2_bufs[last_buf].flags = V4L2_BUF_FLAG_DONE;
+			queue_buf(&vout->done_q, last_buf);
+			vout->ipu_buf[i] = -1;
+			g_buf_output_cnt++;
+			vout->next_done_ipu_buf = !vout->next_done_ipu_buf;
+			spin_unlock_irqrestore(&g_lock, lock_flags);
+		}
 		spin_lock_irqsave(&g_lock, lock_flags);
-		last_buf = vout->ipu_buf[0];
-		vout->v4l2_bufs[last_buf].flags = V4L2_BUF_FLAG_DONE;
-		queue_buf(&vout->done_q, last_buf);
-		vout->ipu_buf[0] = -1;
-		last_buf = vout->ipu_buf[1];
-		vout->v4l2_bufs[last_buf].flags = V4L2_BUF_FLAG_DONE;
-		queue_buf(&vout->done_q, last_buf);
-		vout->ipu_buf[1] = -1;
-		g_buf_output_cnt = 2;
 		wake_up_interruptible(&vout->v4l_bufq);
 		if (vout->state == STATE_STREAM_PAUSED) {
 			index = peek_next_buf(&vout->ready_q);
@@ -344,11 +368,7 @@ static void timer_work_func(struct work_struct *work)
 		return;
 	}
 
-	if (wait_for_disp_vsync(vout) < 0) {
-		/* ic_bypass need clear display buffer ready for next update*/
-		ipu_clear_buffer_ready(vout->display_ch, IPU_INPUT_BUFFER,
-			!vout->next_done_ipu_buf);
-	}
+	wait_for_disp_vsync(vout);
 
 	spin_lock_irqsave(&g_lock, lock_flags);
 
@@ -364,9 +384,7 @@ static void timer_work_func(struct work_struct *work)
 		}
 	}
 
-	if (vout->ic_bypass)
-		ret = select_display_buffer(vout, vout->next_rdy_ipu_buf);
-	else if (LOAD_3FIELDS(vout))
+	if (LOAD_3FIELDS(vout))
 		ret = ipu_select_multi_vdi_buffer(vout->next_rdy_ipu_buf);
 	else
 		ret = ipu_select_buffer(vout->post_proc_ch, IPU_INPUT_BUFFER,
@@ -376,8 +394,8 @@ static void timer_work_func(struct work_struct *work)
 				"unable to set IPU buffer ready\n");
 	}
 
-	/* Non IC split action */
-	if (!vout->pp_split)
+	/* Non IC split/IC bypass action */
+	if (!vout->pp_split && !vout->ic_bypass)
 		vout->next_rdy_ipu_buf = !vout->next_rdy_ipu_buf;
 
 	/* Setup timer for next buffer */
@@ -457,6 +475,8 @@ static void mxc_v4l2out_timer_handler(unsigned long arg)
 		ret = ipu_update_channel_buffer(vout->display_ch, IPU_INPUT_BUFFER,
 				      vout->next_rdy_ipu_buf,
 				      vout->v4l2_bufs[index].m.offset);
+		ret += select_display_buffer(vout, vout->next_rdy_ipu_buf);
+		vout->next_rdy_ipu_buf = !vout->next_rdy_ipu_buf;
 	} else {
 		if (LOAD_3FIELDS(vout)) {
 			int index_n = index;
diff --git a/drivers/mxc/ipu/ipu_common.c b/drivers/mxc/ipu/ipu_common.c
index 43ba100..a1dc566 100644
--- a/drivers/mxc/ipu/ipu_common.c
+++ b/drivers/mxc/ipu/ipu_common.c
@@ -707,6 +707,38 @@ int32_t ipu_select_buffer(ipu_channel_t channel, ipu_buffer_t type,
 }
 
 /*!
+ * This function check buffer ready for a logical channel.
+ *
+ * @param       channel         Input parameter for the logical channel ID.
+ *
+ * @param       type            Input parameter which buffer to clear.
+ *
+ * @param       bufNum          Input parameter for which buffer number clear
+ * 				ready state.
+ *
+ */
+int32_t ipu_check_buffer_busy(ipu_channel_t channel, ipu_buffer_t type,
+		uint32_t bufNum)
+{
+	uint32_t dma_chan = channel_2_dma(channel, type);
+	uint32_t reg;
+
+	if (dma_chan == IDMA_CHAN_INVALID)
+		return -EINVAL;
+
+	if (bufNum == 0)
+		reg = __raw_readl(IPU_CHA_BUF0_RDY);
+	else
+		reg = __raw_readl(IPU_CHA_BUF1_RDY);
+
+	if (reg & (1UL << dma_chan))
+		return 1;
+	else
+		return 0;
+}
+EXPORT_SYMBOL(ipu_check_buffer_busy);
+
+/*!
  * This function links 2 channels together for automatic frame
  * synchronization. The output of the source channel is linked to the input of
  * the destination channel.
diff --git a/drivers/mxc/ipu3/ipu_common.c b/drivers/mxc/ipu3/ipu_common.c
index e12483d..0dc1b26 100644
--- a/drivers/mxc/ipu3/ipu_common.c
+++ b/drivers/mxc/ipu3/ipu_common.c
@@ -1734,6 +1734,38 @@ int32_t ipu_enable_channel(ipu_channel_t channel)
 EXPORT_SYMBOL(ipu_enable_channel);
 
 /*!
+ * This function check buffer ready for a logical channel.
+ *
+ * @param       channel         Input parameter for the logical channel ID.
+ *
+ * @param       type            Input parameter which buffer to clear.
+ *
+ * @param       bufNum          Input parameter for which buffer number clear
+ * 				ready state.
+ *
+ */
+int32_t ipu_check_buffer_busy(ipu_channel_t channel, ipu_buffer_t type,
+		uint32_t bufNum)
+{
+	uint32_t dma_chan = channel_2_dma(channel, type);
+	uint32_t reg;
+
+	if (dma_chan == IDMA_CHAN_INVALID)
+		return -EINVAL;
+
+	if (bufNum == 0)
+		reg = __raw_readl(IPU_CHA_BUF0_RDY(dma_chan));
+	else
+		reg = __raw_readl(IPU_CHA_BUF1_RDY(dma_chan));
+
+	if (reg & idma_mask(dma_chan))
+		return 1;
+	else
+		return 0;
+}
+EXPORT_SYMBOL(ipu_check_buffer_busy);
+
+/*!
  * This function clear buffer ready for a logical channel.
  *
  * @param       channel         Input parameter for the logical channel ID.
diff --git a/include/linux/ipu.h b/include/linux/ipu.h
index 3211ad0..135db82 100644
--- a/include/linux/ipu.h
+++ b/include/linux/ipu.h
@@ -898,6 +898,8 @@ int32_t ipu_link_channels(ipu_channel_t src_ch, ipu_channel_t dest_ch);
 int32_t ipu_unlink_channels(ipu_channel_t src_ch, ipu_channel_t dest_ch);
 
 int32_t ipu_is_channel_busy(ipu_channel_t channel);
+int32_t ipu_check_buffer_busy(ipu_channel_t channel, ipu_buffer_t type,
+		uint32_t bufNum);
 void ipu_clear_buffer_ready(ipu_channel_t channel, ipu_buffer_t type,
 		uint32_t bufNum);
 uint32_t ipu_get_cur_buffer_idx(ipu_channel_t channel, ipu_buffer_t type);
-- 
1.5.4.4

