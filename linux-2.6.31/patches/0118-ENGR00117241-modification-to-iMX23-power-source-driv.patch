From 9cd599b6cc1c0e0a83720b0996c2645e2b0c095d Mon Sep 17 00:00:00 2001
From: Frank.Li <Frank.Li@freescale.com>
Date: Fri, 13 Nov 2009 16:36:34 -0600
Subject: [PATCH] ENGR00117241 modification to iMX23 power source driver for stability

Fixes problems with incorrect DCDC settings.  Adds support for 4p2 power
supply necessary for meeting supply requirement during 5V connections.

Clean up stmp3xxxx_setl and stmp3xxx_clearl because some register have
not _SCT register

Signed-off-by: Robert Lee <robert.lee@freescale.com>
Signed-off-by: Frank.Li <Frank.Li@freescale.com>
---
 drivers/power/stmp37xx/ddi_power_battery.c |  495 ++++++++++++++++++----------
 1 files changed, 326 insertions(+), 169 deletions(-)

diff --git a/drivers/power/stmp37xx/ddi_power_battery.c b/drivers/power/stmp37xx/ddi_power_battery.c
index f9079fc..ec3f6fa 100644
--- a/drivers/power/stmp37xx/ddi_power_battery.c
+++ b/drivers/power/stmp37xx/ddi_power_battery.c
@@ -27,6 +27,7 @@
 #include <linux/errno.h>
 #include <linux/delay.h>
 #include <asm/processor.h> /* cpu_relax */
+#include <mach/platform.h>
 #include <mach/hardware.h>
 #include <mach/ddi_bc.h>
 #include <mach/lradc.h>
@@ -59,27 +60,31 @@
 
 #define GAIN_CORRECTION 1012    // 1.012
 
-/* NOTE: the below define is different for 37xx and 378x */
+#define VBUSVALID_THRESH_2_90V		0x0
+#define VBUSVALID_THRESH_4_00V		0x1
+#define VBUSVALID_THRESH_4_10V		0x2
+#define VBUSVALID_THRESH_4_20V		0x3
 #define VBUSVALID_THRESH_4_30V		0x4
+#define VBUSVALID_THRESH_4_40V		0x5
+#define VBUSVALID_THRESH_4_50V		0x6
+#define VBUSVALID_THRESH_4_60V		0x7
+
 #define LINREG_OFFSET_STEP_BELOW	0x2
 #define BP_POWER_BATTMONITOR_BATT_VAL	16
 #define BP_POWER_CHARGE_BATTCHRG_I	0
 #define BP_POWER_CHARGE_STOP_ILIMIT	8
 
+#define VDD4P2_ENABLED
+
 ////////////////////////////////////////////////////////////////////////////////
 // Globals & Variables
 ////////////////////////////////////////////////////////////////////////////////
 
-// FIXME
-/* We cant use VBUSVALID signal for VDD5V detection, since setting in
- * USB driver POWER_DEBUG.VBUSVALIDPIOLOCK bit locks the POWER_STS.VBUSVALID to
- * active state for all power states (even if the 5v went away). The
- * POWER_CTRL.VBUSVALID_IRQ is also affected and it's impossible to get
- * valid information about 5v presence.
- */
-/* static ddi_power_5vDetection_t DetectionMethod =
-			DDI_POWER_5V_VDD5V_GT_VDDIO; */
-static ddi_power_5vDetection_t DetectionMethod = DDI_POWER_5V_VBUSVALID;
+
+/* Select your 5V Detection method */
+ static ddi_power_5vDetection_t DetectionMethod =
+			DDI_POWER_5V_VDD5V_GT_VDDIO;
+/* static ddi_power_5vDetection_t DetectionMethod = DDI_POWER_5V_VBUSVALID; */
 
 ////////////////////////////////////////////////////////////////////////////////
 // Code
@@ -142,23 +147,21 @@ void ddi_power_Enable5vDetection(void)
 {
 	u32 val;
 	// Disable hardware power down when 5V is inserted or removed
-	stmp3xxx_clearl(BM_POWER_5VCTRL_PWDN_5VBRNOUT, REGS_POWER_BASE + HW_POWER_5VCTRL);
-
-	/*
-	 * Prepare the hardware for the detection method.  We used to set
-	 * and clear the VBUSVALID_5VDETECT bit, but that is also used for
-	 * the DCDC 5V detection.  It is sufficient to just check the status
-	 * bits to see if 5V is present.
-	 *
-	 * Use VBUSVALID for DCDC 5V detection.  The DCDC's detection is
-	 * different than the USB/5V detection used to switch profiles.  This
-	 * is used to determine when a handoff should occur.
+	__raw_writel(BM_POWER_5VCTRL_PWDN_5VBRNOUT,
+		REGS_POWER_BASE + HW_POWER_5VCTRL_CLR);
+
+	/* Enabling VBUSVALID hardware detection even if VDD5V_GT_VDDIO
+	 * is the detection method being used for 5V status (hardware
+	 * or software).  This is in case any other drivers (such as
+	 * USB) are specifically monitoring VBUSVALID status
 	 */
-	stmp3xxx_setl(BM_POWER_5VCTRL_VBUSVALID_5VDETECT, REGS_POWER_BASE + HW_POWER_5VCTRL);
+	__raw_writel(BM_POWER_5VCTRL_VBUSVALID_5VDETECT,
+			REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
 
 	// Set 5V detection threshold to 4.3V for VBUSVALID.
-	stmp3xxx_setl(
-		BF(VBUSVALID_THRESH_4_30V, POWER_5VCTRL_VBUSVALID_TRSH), REGS_POWER_BASE + HW_POWER_5VCTRL);
+	__raw_writel(
+		BF(VBUSVALID_THRESH_4_30V, POWER_5VCTRL_VBUSVALID_TRSH),
+			REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
 
 	// gotta set LINREG_OFFSET to STEP_BELOW according to manual
 	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
@@ -177,11 +180,26 @@ void ddi_power_Enable5vDetection(void)
 	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDDCTRL);
 
 	/* Clear vbusvalid interrupt flag */
-//	stmp3xxx_clearl(BM_POWER_CTRL_VBUSVALID_IRQ, REGS_POWER_BASE + HW_POWER_CTRL);
-	stmp3xxx_clearl(BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ, REGS_POWER_BASE + HW_POWER_CTRL);
+	__raw_writel(BM_POWER_CTRL_VBUSVALID_IRQ,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
+	__raw_writel(BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
 	/* enable vbusvalid irq */
-//	stmp3xxx_setl(BM_POWER_CTRL_ENIRQ_VBUS_VALID, REGS_POWER_BASE + HW_POWER_CTRL);
-	stmp3xxx_setl(BM_POWER_CTRL_ENIRQ_VDD5V_GT_VDDIO, REGS_POWER_BASE + HW_POWER_CTRL);
+
+
+	/* enable 5V Detection interrupt vbusvalid irq */
+	switch (DetectionMethod) {
+	case DDI_POWER_5V_VBUSVALID:
+		/* Check VBUSVALID for 5V present */
+		__raw_writel(BM_POWER_CTRL_ENIRQ_VBUS_VALID,
+				REGS_POWER_BASE + HW_POWER_CTRL_SET);
+		break;
+	case DDI_POWER_5V_VDD5V_GT_VDDIO:
+		/* Check VDD5V_GT_VDDIO for 5V present */
+		__raw_writel(BM_POWER_CTRL_ENIRQ_VDD5V_GT_VDDIO,
+				REGS_POWER_BASE + HW_POWER_CTRL_SET);
+		break;
+	}
 }
 
 /*
@@ -192,15 +210,22 @@ void ddi_power_Enable5vDetection(void)
 void ddi_power_enable_5v_to_battery_handoff(void)
 {
 	/* Clear vbusvalid interrupt flag */
-//	stmp3xxx_clearl(BM_POWER_CTRL_VBUSVALID_IRQ, REGS_POWER_BASE + HW_POWER_CTRL);
-	stmp3xxx_clearl(BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ, REGS_POWER_BASE + HW_POWER_CTRL);
+	__raw_writel(BM_POWER_CTRL_VBUSVALID_IRQ,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
+	__raw_writel(BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
 
 	/* detect 5v unplug */
-//	stmp3xxx_clearl(BM_POWER_CTRL_POLARITY_VBUSVALID, REGS_POWER_BASE + HW_POWER_CTRL);
-	stmp3xxx_clearl(BM_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO, REGS_POWER_BASE + HW_POWER_CTRL);
+	__raw_writel(BM_POWER_CTRL_POLARITY_VBUSVALID,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
+	__raw_writel(BM_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
 
+#ifndef VDD4P2_ENABLED
 	// Enable automatic transition to DCDC
-	stmp3xxx_setl(BM_POWER_5VCTRL_DCDC_XFER, REGS_POWER_BASE + HW_POWER_5VCTRL);
+	__raw_writel(BM_POWER_5VCTRL_DCDC_XFER,
+				REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
+#endif
 }
 
 /*
@@ -210,50 +235,65 @@ void ddi_power_enable_5v_to_battery_handoff(void)
  */
 void ddi_power_execute_5v_to_battery_handoff(void)
 {
-	u32 val;
+	int val;
+#ifdef VDD4P2_ENABLED
+	val = __raw_readl(REGS_POWER_BASE + HW_POWER_DCDC4P2);
+	val &= ~(BM_POWER_DCDC4P2_ENABLE_DCDC | BM_POWER_DCDC4P2_ENABLE_4P2);
+	__raw_writel(val, REGS_POWER_BASE + HW_POWER_DCDC4P2);
+
+	__raw_writel(BM_POWER_5VCTRL_PWD_CHARGE_4P2,
+				REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
+#else
 	// VDDD has different configurations depending on the battery type
 	// and battery level.
 
 	// For LiIon battery, we will use the DCDC to power VDDD.
 	// Use LinReg offset for DCDC mode.
+	__raw_writel(BF_POWER_VDDDCTRL_LINREG_OFFSET(LINREG_OFFSET_STEP_BELOW),
+				HW_POWER_BASE + HW_POWER_VDDDCTRL_SET);
 	// Turn on the VDDD DCDC output and turn off the VDDD LinReg output.
+	__raw_writel(BM_POWER_VDDDCTRL_DISABLE_FET,
+				HW_POWER_BASE + HW_POWER_VDDDCTRL_CLR);
+
+	__raw_writel(BM_POWER_VDDDCTRL_ENABLE_LINREG,
+				HW_POWER_BASE + HW_POWER_VDDDCTRL_CLR);
 	// Make sure stepping is enabled when using DCDC.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDDCTRL);
-	val &= ~(BM_POWER_VDDDCTRL_DISABLE_FET | BM_POWER_VDDDCTRL_ENABLE_LINREG |
-			BM_POWER_VDDDCTRL_DISABLE_STEPPING | BM_POWER_VDDDCTRL_LINREG_OFFSET);
-	val |= BF(LINREG_OFFSET_STEP_BELOW, POWER_VDDDCTRL_LINREG_OFFSET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDDCTRL);
+	__raw_writel(BM_POWER_VDDDCTRL_DISABLE_STEPPING,
+				HW_POWER_BASE + HW_POWER_VDDDCTRL_CLR);
 
 	// Power VDDA and VDDIO from the DCDC.
-	// Use LinReg offset for DCDC mode.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDACTRL);
-	val &= ~(BM_POWER_VDDACTRL_LINREG_OFFSET);
-	val |= BF(LINREG_OFFSET_STEP_BELOW, POWER_VDDACTRL_LINREG_OFFSET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDACTRL);
 
+	/* Use LinReg offset for DCDC mode. */
+	__raw_writel(BF_POWER_VDDACTRL_LINREG_OFFSET(LINREG_OFFSET_STEP_BELOW),
+				HW_POWER_BASE + HW_POWER_VDDACTRL_SET);
 	// Turn on the VDDA DCDC converter output and turn off LinReg output.
+	__raw_writel(BM_POWER_VDDACTRL_DISABLE_FET,
+				HW_POWER_BASE + HW_POWER_VDDACTRL_CLR);
+	__raw_writel(BM_POWER_VDDACTRL_ENABLE_LINREG,
+				HW_POWER_BASE + HW_POWER_VDDACTRL_CLR);
+
 	// Make sure stepping is enabled when using DCDC.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDACTRL);
-	val &= ~(BM_POWER_VDDACTRL_DISABLE_FET |
-			BM_POWER_VDDACTRL_ENABLE_LINREG |
-			BM_POWER_VDDACTRL_DISABLE_STEPPING);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDACTRL);
+	__raw_writel(BM_POWER_VDDACTRL_DISABLE_STEPPING,
+				HW_POWER_BASE + HW_POWER_VDDACTRL_CLR);
 
 	// Use LinReg offset for DCDC mode.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	val &= ~(BM_POWER_VDDIOCTRL_LINREG_OFFSET);
-	val |= BF(LINREG_OFFSET_STEP_BELOW, POWER_VDDIOCTRL_LINREG_OFFSET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	// Turn on the VDDIO DCDC output and turn on the LinReg output.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	val &= ~(BM_POWER_VDDIOCTRL_DISABLE_FET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
+	__raw_writel(BF_POWER_VDDIOCTRL_LINREG_OFFSET(
+					LINREG_OFFSET_STEP_BELOW
+						),
+				HW_POWER_BASE + HW_POWER_VDDIOCTRL_SET);
+
+	/* Turn on the VDDIO DCDC output and turn on the LinReg output.*/
+	__raw_writel(BM_POWER_VDDIOCTRL_DISABLE_FET,
+				HW_POWER_BASE + HW_POWER_VDDIOCTRL_CLR);
+
+	__raw_writel(BM_POWER_5VCTRL_ILIMIT_EQ_ZERO,
+				HW_POWER_BASE + HW_POWER_5VCTRL_CLR_CLR);
 
-	stmp3xxx_clearl(BM_POWER_5VCTRL_ILIMIT_EQ_ZERO, REGS_POWER_BASE + HW_POWER_5VCTRL);
 	// Make sure stepping is enabled when using DCDC.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	val &= ~(BM_POWER_VDDIOCTRL_DISABLE_STEPPING);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
+	__raw_writel(BM_POWER_VDDIOCTRL_DISABLE_STEPPING,
+				HW_POWER_BASE + HW_POWER_VDDIOCTRL_CLR);
+#endif
+
 }
 
 /*
@@ -266,105 +306,164 @@ void ddi_power_execute_5v_to_battery_handoff(void)
 void ddi_power_enable_battery_to_5v_handoff(void)
 {
 	/* Clear vbusvalid interrupt flag */
-//	stmp3xxx_clearl(BM_POWER_CTRL_VBUSVALID_IRQ, REGS_POWER_BASE + HW_POWER_CTRL);
-	stmp3xxx_clearl(BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ, REGS_POWER_BASE + HW_POWER_CTRL);
+	__raw_writel(BM_POWER_CTRL_VBUSVALID_IRQ,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
+	__raw_writel(BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ,
+				REGS_POWER_BASE + HW_POWER_CTRL_CLR);
 
 	/* detect 5v plug-in */
-//	stmp3xxx_setl(BM_POWER_CTRL_POLARITY_VBUSVALID, REGS_POWER_BASE + HW_POWER_CTRL);
-	stmp3xxx_setl(BM_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO, REGS_POWER_BASE + HW_POWER_CTRL);
+	__raw_writel(BM_POWER_CTRL_POLARITY_VBUSVALID,
+				REGS_POWER_BASE + HW_POWER_CTRL_SET);
+	__raw_writel(BM_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO,
+				REGS_POWER_BASE + HW_POWER_CTRL_SET);
 
+#ifndef VDD4P2_ENABLED
 	// Force current from 5V to be zero by disabling its entry source.
-	stmp3xxx_setl(BM_POWER_5VCTRL_ILIMIT_EQ_ZERO, REGS_POWER_BASE + HW_POWER_5VCTRL);
-
+	__raw_writel(BM_POWER_5VCTRL_ILIMIT_EQ_ZERO,
+				REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
+#endif
 	// Allow DCDC be to active when 5V is present.
-	stmp3xxx_setl(BM_POWER_5VCTRL_ENABLE_DCDC, REGS_POWER_BASE + HW_POWER_5VCTRL);
+	__raw_writel(BM_POWER_5VCTRL_ENABLE_DCDC,
+				REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
 }
 
-/* This function handles the transitions on each of the power rails necessary
- * to power the chip from the 5V power supply when it was previously powered
- * from the battery power supply.
+/* This function handles the transitions on each of theVDD5V_GT_VDDIO power
+ * rails necessary to power the chip from the 5V power supply when it was
+ * previously powered from the battery power supply.
  */
 void ddi_power_execute_battery_to_5v_handoff(void)
 {
 	u32 val;
+
+#ifdef VDD4P2_ENABLED
+
+	bool orig_vbusvalid_5vdetect = false;
+	bool orig_pwd_bo = false;
+	uint8_t orig_vbusvalid_threshold;
+
+
+	/* recording orignal values that will be modified
+	* temporarlily to handle a chip bug.  See chip errata
+	* for CQ ENGR00115837
+	*/
+	orig_vbusvalid_threshold =
+		(__raw_readl(HW_POWER_5VCTRL_ADDR)
+		& BM_POWER_5VCTRL_VBUSVALID_TRSH)
+		>> BP_POWER_5VCTRL_VBUSVALID_TRSH;
+
+	if (__raw_readl(HW_POWER_5VCTRL_ADDR) &
+		BM_POWER_5VCTRL_VBUSVALID_5VDETECT)
+			orig_vbusvalid_5vdetect = true;
+
+	if (__raw_readl(HW_POWER_MINPWR_ADDR) &
+		BM_POWER_MINPWR_PWD_BO)
+			orig_pwd_bo = true;
+
+	/* disable mechanisms that get erroneously tripped by
+	* when setting the DCDC4P2 EN_DCDC
+	*/
+	__raw_writel(BM_POWER_5VCTRL_VBUSVALID_5VDETECT,
+			REGS_POWER_BASE + HW_POWER_5VCTRL_CLR);
+	__raw_writel(BF_POWER_5VCTRL_VBUSVALID_TRSH(0x7),
+			REGS_POWER_BASE + HW_POWER_5VCTRL_CLR);
+
+	__raw_writel(BM_POWER_MINPWR_PWD_BO,
+			REGS_POWER_BASE + HW_POWER_MINPWR_SET);
+
+	val = __raw_readl(REGS_POWER_BASE + HW_POWER_DCDC4P2);
+	val |= BM_POWER_DCDC4P2_ENABLE_4P2;
+	__raw_writel(val, REGS_POWER_BASE + HW_POWER_DCDC4P2);
+
+
+	/* as a todo, we'll want to ramp up the charge current first
+	 * to minimize disturbances on the VDD5V rail
+	 */
+	ddi_power_SetChargerPowered(1);
+
+	/* Until the previous todo is completed, we'll want to give a delay
+	 * to allow the charging up of the 4p2 capacitor.
+	 */
+	udelay(10);
+
+	val = __raw_readl(REGS_POWER_BASE + HW_POWER_DCDC4P2);
+	val |= BM_POWER_DCDC4P2_ENABLE_DCDC;
+	__raw_writel(val, REGS_POWER_BASE + HW_POWER_DCDC4P2);
+
+	udelay(20);
+	/* coming from a known value of 0 so this is ok */
+	__raw_writel(BF_POWER_5VCTRL_VBUSVALID_TRSH(orig_vbusvalid_threshold),
+			REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
+
+	if (orig_vbusvalid_5vdetect)
+		__raw_writel(BM_POWER_5VCTRL_VBUSVALID_5VDETECT,
+				REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
+
+
+	if (!orig_pwd_bo)
+		__raw_writel(BM_POWER_MINPWR_PWD_BO,
+				REGS_POWER_BASE + HW_POWER_MINPWR_CLR);
+#else
 	// Disable the DCDC during 5V connections.
-	stmp3xxx_clearl(BM_POWER_5VCTRL_ENABLE_DCDC, REGS_POWER_BASE + HW_POWER_5VCTRL);
+	__raw_writel(BM_POWER_5VCTRL_ENABLE_DCDC,
+				HW_POWER_BAE + HW_POWER_5VCTRL_CLR);
 
 	// Power the VDDD/VDDA/VDDIO rail from the linear regulator.  The DCDC
 	// is ready to automatically power the chip when 5V is removed.
 	// Use this configuration when powering from 5V
 
 	// Use LinReg offset for LinReg mode
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDDCTRL);
-	val &= ~BM_POWER_VDDDCTRL_LINREG_OFFSET;
-	val |= BF(LINREG_OFFSET_STEP_BELOW, POWER_VDDDCTRL_LINREG_OFFSET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDDCTRL);
+	__raw_writel(BF_POWER_VDDDCTRL_LINREG_OFFSET(LINREG_OFFSET_STEP_BELOW),
+				HW_POWER_BAE + HW_POWER_VDDDCTRL_SET);
 
 	// Turn on the VDDD LinReg and turn on the VDDD DCDC output.  The
 	// ENABLE_DCDC must be cleared to avoid LinReg and DCDC conflict.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDDCTRL);
-	val &= ~(BM_POWER_VDDDCTRL_ENABLE_LINREG | BM_POWER_VDDDCTRL_DISABLE_FET);
-	val |= BM_POWER_VDDDCTRL_ENABLE_LINREG;
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDDCTRL);
+	__raw_writel(BM_POWER_VDDDCTRL_ENABLE_LINREG,
+				HW_POWER_BAE + HW_POWER_VDDDCTRL_SET);
+	__raw_writel(BM_POWER_VDDDCTRL_DISABLE_FET,
+				HW_POWER_BAE + HW_POWER_VDDDCTRL_CLR);
+
 	// Make sure stepping is disabled when using linear regulators
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDDCTRL);
-	val &= ~(BM_POWER_VDDDCTRL_DISABLE_STEPPING);
-	val |= BM_POWER_VDDDCTRL_DISABLE_STEPPING;
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDDCTRL);
+	__raw_writel(BM_POWER_VDDDCTRL_DISABLE_STEPPING,
+				HW_POWER_BAE + HW_POWER_VDDDCTRL_SET);
 
 	// Use LinReg offset for LinReg mode
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDACTRL);
-	val &= ~(BM_POWER_VDDACTRL_LINREG_OFFSET);
-	val |= BF(LINREG_OFFSET_STEP_BELOW, POWER_VDDACTRL_LINREG_OFFSET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDACTRL);
+	__raw_writel(BM_POWER_VDDACTRL_LINREG_OFFSET(LINREG_OFFSET_STEP_BELOW),
+				HW_POWER_BAE + HW_POWER_VDDACTRL_SET);
+
 
 	// Turn on the VDDA LinReg output and prepare the DCDC for transfer.
 	// ENABLE_DCDC must be clear to avoid DCDC and LinReg conflict.
+	stmp3xxx_set(BM_POWER_VDDACTRL_ENABLE_LINREG,
+				HW_POWER_BASE + HW_POWER_VDDACTRL_SET);
+	__raw_writel(BM_POWER_VDDACTRL_DISABLE_FET,
+				HW_POWER_BASE + HW_POWER_VDDACTRL_CLR);
+
 	// Make sure stepping is disabled when using linear regulators
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDACTRL);
-	val &= ~(BM_POWER_VDDACTRL_ENABLE_LINREG | BM_POWER_VDDACTRL_DISABLE_FET |
-			BM_POWER_VDDACTRL_DISABLE_STEPPING);
-	val |= BM_POWER_VDDACTRL_ENABLE_LINREG | BM_POWER_VDDACTRL_DISABLE_STEPPING;
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDACTRL);
+	__raw_writel(BM_POWER_VDDACTRL_DISABLE_STEPPING,
+				 HW_POWER_BASE + HW_POWER_VDDACTRL_SET);
 
 	// Use LinReg offset for LinReg mode.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	val &= ~(BM_POWER_VDDIOCTRL_LINREG_OFFSET);
-	val |= BF(LINREG_OFFSET_STEP_BELOW, POWER_VDDIOCTRL_LINREG_OFFSET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
+	__raw_writel(BF_POWER_VDDIOCTRL_LINREG_OFFSET(
+					LINREG_OFFSET_STEP_BELOW),
+				HW_POWER_BASE + HW_POWER_VDDIOCTRL_SET);
 
 	// Turn on the VDDIO LinReg output and prepare the VDDIO DCDC output.
         // ENABLE_DCDC must be cleared to prevent DCDC and LinReg conflict.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	val &= ~(BM_POWER_VDDIOCTRL_DISABLE_FET);
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
+	__raw_writel(BM_POWER_VDDIOCTRL_DISABLE_FET,
+				HW_POWER_BASE + HW_POWER_VDDIOCTRL_CLR);
+	__raw_writel(BM_POWER_5VCTRL_ILIMIT_EQ_ZERO,
+			REGS_POWER_BASE + HW_POWER_5VCTRL_CLR);
 
-	stmp3xxx_clearl(BM_POWER_5VCTRL_ILIMIT_EQ_ZERO, REGS_POWER_BASE + HW_POWER_5VCTRL);
 	// Make sure stepping is disabled when using DCDC.
-	val = __raw_readl(REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
-	val |= BM_POWER_VDDIOCTRL_DISABLE_STEPPING;
-	__raw_writel(val, REGS_POWER_BASE + HW_POWER_VDDIOCTRL);
+	__raw_writel(BM_POWER_VDDIOCTRL_DISABLE_STEPPING,
+			REGS_POWER_BASE + HW_POWER_VDDIOCTRL_SET);
+#endif
 }
 
 void ddi_power_init_handoff(void)
 {
-	u32 val;
-	/*
-	 * The following settings give optimal power supply capability and
-	 * efficiency.  Extreme loads will need HALF_FETS cleared and
-	 * possibly DOUBLE_FETS set.  The below setting are probably also
-	 * the best for alkaline mode also but more characterization is
-	 * needed to know for sure.
-	 */
-	// Increase the RCSCALE_THRESHOLD
-	stmp3xxx_setl(BM_POWER_LOOPCTRL_RCSCALE_THRESH,
-			REGS_POWER_BASE + HW_POWER_LOOPCTRL);
-	// Increase the RCSCALE level for quick DCDC response to dynamic load
-	stmp3xxx_setl(BF(3, POWER_LOOPCTRL_EN_RCSCALE),
-			REGS_POWER_BASE + HW_POWER_LOOPCTRL); // 8x
-
-	// Enable half fets for increase efficiency.
-	stmp3xxx_setl(BM_POWER_MINPWR_HALF_FETS, REGS_POWER_BASE + HW_POWER_MINPWR);
+	int val;
+	/* The following settings give optimal power supply capability */
 
 	// enable 5v presence detection
 	ddi_power_Enable5vDetection();
@@ -386,6 +485,11 @@ int ddi_power_init_battery(void)
 {
 	int ret;
 
+
+	/* the following code to enable automatic battery measurement
+	 * should have already been enabled in the boot prep files.  Not
+	 * sure if this is necessary or possibly suceptible to mis-coordination
+	 */
 	// Init LRADC channel 7
 	ret = hw_lradc_init_ladder(BATTERY_VOLTAGE_CH,
 				   LRADC_DELAY_TRIGGER_BATTERY,
@@ -395,21 +499,35 @@ int ddi_power_init_battery(void)
 		return ret;
 	}
 
-	stmp3xxx_setl(BM_LRADC_CONVERSION_AUTOMATIC, REGS_LRADC_BASE + HW_LRADC_CONVERSION);
+	__raw_writel(BM_LRADC_CONVERSION_AUTOMATIC,
+			REGS_LRADC_BASE + HW_LRADC_CONVERSION_SET);
 
 	// Set li-ion mode
-	stmp3xxx_setl(BF(2, LRADC_CONVERSION_SCALE_FACTOR), REGS_LRADC_BASE + HW_LRADC_CONVERSION);
+	__raw_writel(BF(2, LRADC_CONVERSION_SCALE_FACTOR),
+			REGS_LRADC_BASE + HW_LRADC_CONVERSION_SET);
 
 	// Turn off divide-by-two - we already have a divide-by-four
 	// as part of the hardware
-	stmp3xxx_clearl(
-		BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL2_DIVIDE_BY_TWO), REGS_LRADC_BASE + HW_LRADC_CTRL2);
+	__raw_writel(
+		BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL2_DIVIDE_BY_TWO),
+			REGS_LRADC_BASE + HW_LRADC_CTRL2_CLR);
 
-	stmp3xxx_setl(BM_POWER_CHARGE_ENABLE_FAULT_DETECT, REGS_POWER_BASE + HW_POWER_CHARGE);
+	__raw_writel(BM_POWER_CHARGE_ENABLE_FAULT_DETECT,
+			REGS_POWER_BASE + HW_POWER_CHARGE_SET);
 
 	// kick off the trigger
 	hw_lradc_set_delay_trigger_kick(LRADC_DELAY_TRIGGER_BATTERY, 1);
 
+	__raw_writel(BM_POWER_LOOPCTRL_RCSCALE_THRESH,
+				REGS_POWER_BASE + HW_POWER_LOOPCTRL_SET);
+	__raw_writel(BF_POWER_LOOPCTRL_EN_RCSCALE(3),
+				REGS_POWER_BASE + HW_POWER_LOOPCTRL_SET);
+
+	__raw_writel(BM_POWER_MINPWR_HALF_FETS,
+				REGS_POWER_BASE + HW_POWER_MINPWR_CLR);
+	__raw_writel(BM_POWER_MINPWR_DOUBLE_FETS,
+				REGS_POWER_BASE + HW_POWER_MINPWR_SET);
+
 	/* prepare handoff */
 	ddi_power_init_handoff();
 
@@ -425,55 +543,84 @@ uint16_t MeasureInternalDieTemperature(void)
 	uint32_t  ch8Value, ch9Value;
 
 	/* power up internal tep sensor block */
-	stmp3xxx_clearl(BM_LRADC_CTRL2_TEMPSENSE_PWD, REGS_LRADC_BASE + HW_LRADC_CTRL2);
+	__raw_writel(BM_LRADC_CTRL2_TEMPSENSE_PWD,
+			REGS_LRADC_BASE + HW_LRADC_CTRL2_CLR);
 
 	/* mux to the lradc 8th temp channel */
-	stmp3xxx_clearl(BF(0xF, LRADC_CTRL4_LRADC7SELECT), REGS_LRADC_BASE + HW_LRADC_CTRL4);
-	stmp3xxx_setl(BF(8, LRADC_CTRL4_LRADC7SELECT), REGS_LRADC_BASE + HW_LRADC_CTRL4);
+	__raw_writel(BF(0xF, LRADC_CTRL4_LRADC7SELECT),
+			REGS_LRADC_BASE + HW_LRADC_CTRL4_CLR);
+	__raw_writel(BF(8, LRADC_CTRL4_LRADC7SELECT),
+			REGS_LRADC_BASE + HW_LRADC_CTRL4_SET);
 
 	/* Clear the interrupt flag */
-	stmp3xxx_clearl(BM_LRADC_CTRL1_LRADC7_IRQ, REGS_LRADC_BASE + HW_LRADC_CTRL1);
-	stmp3xxx_setl(BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL0_SCHEDULE), REGS_LRADC_BASE + HW_LRADC_CTRL0);
+	__raw_writel(BM_LRADC_CTRL1_LRADC7_IRQ,
+			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+	__raw_writel(BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL0_SCHEDULE),
+			REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
 	// Wait for conversion complete
-        while (!(__raw_readl(REGS_LRADC_BASE + HW_LRADC_CTRL1) & BM_LRADC_CTRL1_LRADC7_IRQ))
+	while (!(__raw_readl(REGS_LRADC_BASE + HW_LRADC_CTRL1)
+			& BM_LRADC_CTRL1_LRADC7_IRQ))
                 cpu_relax();
 	/* Clear the interrupt flag again */
-	stmp3xxx_clearl(BM_LRADC_CTRL1_LRADC7_IRQ, REGS_LRADC_BASE + HW_LRADC_CTRL1);
+	__raw_writel(BM_LRADC_CTRL1_LRADC7_IRQ,
+			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+
 	// read temperature value and clr lradc
-	ch8Value = __raw_readl(REGS_LRADC_BASE + HW_LRADC_CHn(BATTERY_VOLTAGE_CH)) & BM_LRADC_CHn_VALUE;
-	stmp3xxx_clearl(BM_LRADC_CHn_VALUE, REGS_LRADC_BASE + HW_LRADC_CHn(BATTERY_VOLTAGE_CH));
+	ch8Value = __raw_readl(REGS_LRADC_BASE +
+			HW_LRADC_CHn(BATTERY_VOLTAGE_CH)) & BM_LRADC_CHn_VALUE;
+
+	__raw_writel(BM_LRADC_CHn_VALUE,
+			REGS_LRADC_BASE + HW_LRADC_CHn_CLR(BATTERY_VOLTAGE_CH));
 
 	/* mux to the lradc 9th temp channel */
-	stmp3xxx_clearl(BF(0xF, LRADC_CTRL4_LRADC7SELECT), REGS_LRADC_BASE + HW_LRADC_CTRL4);
-	stmp3xxx_setl(BF(9, LRADC_CTRL4_LRADC7SELECT), REGS_LRADC_BASE + HW_LRADC_CTRL4);
+	__raw_writel(BF(0xF, LRADC_CTRL4_LRADC7SELECT),
+			REGS_LRADC_BASE + HW_LRADC_CTRL4_CLR);
+	__raw_writel(BF(9, LRADC_CTRL4_LRADC7SELECT),
+			REGS_LRADC_BASE + HW_LRADC_CTRL4_SET);
 
 	/* Clear the interrupt flag */
-	stmp3xxx_clearl(BM_LRADC_CTRL1_LRADC7_IRQ, REGS_LRADC_BASE + HW_LRADC_CTRL1);
-	stmp3xxx_setl(BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL0_SCHEDULE), REGS_LRADC_BASE + HW_LRADC_CTRL0);
+	__raw_writel(BM_LRADC_CTRL1_LRADC7_IRQ,
+			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+	__raw_writel(BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL0_SCHEDULE),
+			REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
 	// Wait for conversion complete
-        while (!(__raw_readl(REGS_LRADC_BASE + HW_LRADC_CTRL1) & BM_LRADC_CTRL1_LRADC7_IRQ))
+	while (!(__raw_readl(REGS_LRADC_BASE + HW_LRADC_CTRL1)
+			& BM_LRADC_CTRL1_LRADC7_IRQ))
                 cpu_relax();
 	/* Clear the interrupt flag */
-	stmp3xxx_clearl(BM_LRADC_CTRL1_LRADC7_IRQ, REGS_LRADC_BASE + HW_LRADC_CTRL1);
+	__raw_writel(BM_LRADC_CTRL1_LRADC7_IRQ,
+			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
 	// read temperature value
-	ch9Value = __raw_readl(REGS_LRADC_BASE + HW_LRADC_CHn(BATTERY_VOLTAGE_CH)) & BM_LRADC_CHn_VALUE;
-	stmp3xxx_clearl(BM_LRADC_CHn_VALUE, REGS_LRADC_BASE + HW_LRADC_CHn(BATTERY_VOLTAGE_CH));
+	ch9Value = __raw_readl(
+			REGS_LRADC_BASE + HW_LRADC_CHn(BATTERY_VOLTAGE_CH))
+		  & BM_LRADC_CHn_VALUE;
+
+	__raw_writel(BM_LRADC_CHn_VALUE,
+			REGS_LRADC_BASE + HW_LRADC_CHn_CLR(BATTERY_VOLTAGE_CH));
 
 	/* power down temp sensor block */
-	stmp3xxx_setl(BM_LRADC_CTRL2_TEMPSENSE_PWD, REGS_LRADC_BASE + HW_LRADC_CTRL2);
+	__raw_writel(BM_LRADC_CTRL2_TEMPSENSE_PWD,
+			REGS_LRADC_BASE + HW_LRADC_CTRL2_SET);
 
 	/* mux back to the lradc 7th battery voltage channel */
-	stmp3xxx_clearl(BF(0xF, LRADC_CTRL4_LRADC7SELECT), REGS_LRADC_BASE + HW_LRADC_CTRL4);
-	stmp3xxx_setl(BF(7, LRADC_CTRL4_LRADC7SELECT), REGS_LRADC_BASE + HW_LRADC_CTRL4);
+	__raw_writel(BF(0xF, LRADC_CTRL4_LRADC7SELECT),
+			REGS_LRADC_BASE + HW_LRADC_CTRL4_CLR);
+	__raw_writel(BF(7, LRADC_CTRL4_LRADC7SELECT),
+			REGS_LRADC_BASE + HW_LRADC_CTRL4_SET);
 
 	/* Clear the interrupt flag */
-	stmp3xxx_clearl(BM_LRADC_CTRL1_LRADC7_IRQ, REGS_LRADC_BASE + HW_LRADC_CTRL1);
-	stmp3xxx_setl(BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL0_SCHEDULE), REGS_LRADC_BASE + HW_LRADC_CTRL0);
+	__raw_writel(BM_LRADC_CTRL1_LRADC7_IRQ,
+			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
+	__raw_writel(BF(1 << BATTERY_VOLTAGE_CH, LRADC_CTRL0_SCHEDULE),
+			REGS_LRADC_BASE + HW_LRADC_CTRL0_SET);
+
 	// Wait for conversion complete
-        while (!(__raw_readl(REGS_LRADC_BASE + HW_LRADC_CTRL1) & BM_LRADC_CTRL1_LRADC7_IRQ))
+	while (!(__raw_readl(REGS_LRADC_BASE + HW_LRADC_CTRL1)
+			& BM_LRADC_CTRL1_LRADC7_IRQ))
                 cpu_relax();
 	/* Clear the interrupt flag */
-	stmp3xxx_clearl(BM_LRADC_CTRL1_LRADC7_IRQ, REGS_LRADC_BASE + HW_LRADC_CTRL1);
+	__raw_writel(BM_LRADC_CTRL1_LRADC7_IRQ,
+			REGS_LRADC_BASE + HW_LRADC_CTRL1_CLR);
 
 	return (uint16_t)((ch9Value-ch8Value)*GAIN_CORRECTION/4000);
 }
@@ -544,11 +691,17 @@ void ddi_power_SetChargerPowered(bool bPowerOn)
 {
 	// Hit the battery charge power switch.
 	if (bPowerOn) {
-		stmp3xxx_clearl(BM_POWER_CHARGE_PWD_BATTCHRG, REGS_POWER_BASE + HW_POWER_CHARGE);
-		stmp3xxx_clearl(BM_POWER_5VCTRL_PWD_CHARGE_4P2, REGS_POWER_BASE + HW_POWER_5VCTRL);
+		__raw_writel(BM_POWER_CHARGE_PWD_BATTCHRG,
+			REGS_POWER_BASE + HW_POWER_CHARGE_CLR);
+		__raw_writel(BM_POWER_5VCTRL_PWD_CHARGE_4P2,
+			REGS_POWER_BASE + HW_POWER_5VCTRL_CLR);
 	} else {
-		stmp3xxx_setl(BM_POWER_CHARGE_PWD_BATTCHRG, REGS_POWER_BASE + HW_POWER_CHARGE);
-		stmp3xxx_setl(BM_POWER_5VCTRL_PWD_CHARGE_4P2, REGS_POWER_BASE + HW_POWER_5VCTRL);
+		__raw_writel(BM_POWER_CHARGE_PWD_BATTCHRG,
+			REGS_POWER_BASE + HW_POWER_CHARGE_SET);
+#ifndef VDD4P2_ENABLED
+		__raw_writel(BM_POWER_5VCTRL_PWD_CHARGE_4P2,
+			REGS_POWER_BASE + HW_POWER_5VCTRL_SET);
+#endif
 	}
 
 //#ifdef CONFIG_POWER_SUPPLY_DEBUG
@@ -697,8 +850,9 @@ int ddi_power_SetBatteryBrownout(uint16_t u16BattBrownout_mV)
 	// Do a check to make sure nothing went wrong.
 	if (i16BrownoutLevel <= 0x0f) {
 		//Write the battery brownout level
-		stmp3xxx_setl(
-			BF(i16BrownoutLevel, POWER_BATTMONITOR_BRWNOUT_LVL), REGS_POWER_BASE + HW_POWER_BATTMONITOR);
+		__raw_writel(
+			BF(i16BrownoutLevel, POWER_BATTMONITOR_BRWNOUT_LVL),
+				REGS_POWER_BASE + HW_POWER_BATTMONITOR_SET);
 	} else
 		ret = -EINVAL;
 
@@ -719,10 +873,12 @@ int ddi_power_SetBiasCurrentSource(ddi_power_BiasCurrentSource_t eSource)
 {
 	switch (eSource) {
 	case DDI_POWER_INTERNAL_BIAS_CURRENT:
-		stmp3xxx_setl(BM_POWER_CHARGE_USE_EXTERN_R, REGS_POWER_BASE + HW_POWER_CHARGE);
+		__raw_writel(BM_POWER_CHARGE_USE_EXTERN_R,
+			REGS_POWER_BASE + HW_POWER_CHARGE_SET);
 		break;
 	case DDI_POWER_EXTERNAL_BIAS_CURRENT:
-		stmp3xxx_clearl(BM_POWER_CHARGE_USE_EXTERN_R, REGS_POWER_BASE + HW_POWER_CHARGE);
+		__raw_writel(BM_POWER_CHARGE_USE_EXTERN_R,
+			REGS_POWER_BASE + HW_POWER_CHARGE_CLR);
 		break;
 	default:
 		return -EINVAL;
@@ -761,12 +917,12 @@ uint16_t ddi_power_SetMaxBatteryChargeCurrent(uint16_t u16MaxCur)
 	// Convert the new threshold into a setting.
 	u16NewSetting = ddi_power_convert_current_to_setting(u16MaxCur);
 
-	// Write to the toggle register.
-	u16ToggleMask = __raw_readl(REGS_POWER_BASE + HW_POWER_CHARGE);
-	u16ToggleMask &= ~BM_POWER_CHARGE_BATTCHRG_I;
-	u16ToggleMask |= u16NewSetting << BP_POWER_CHARGE_BATTCHRG_I;
+	/* Compute the toggle mask. */
+	u16ToggleMask = u16OldSetting ^ u16NewSetting;
 
-	__raw_writel(u16ToggleMask, REGS_POWER_BASE + HW_POWER_CHARGE);
+	/* Write to the toggle register.*/
+	__raw_writel(u16ToggleMask << BP_POWER_CHARGE_BATTCHRG_I,
+			REGS_POWER_BASE + HW_POWER_CHARGE_TOG);
 
 	// Tell the caller what current we're set at now.
 	return ddi_power_convert_setting_to_current(u16NewSetting);
@@ -841,9 +997,8 @@ uint16_t ddi_power_SetBatteryChargeCurrentThreshold(uint16_t u16Thresh)
 	/////////////////////////////////////////
 
 	// Write to the toggle register.
-	u16ToggleMask = __raw_readl(REGS_POWER_BASE + HW_POWER_CHARGE);
-	u16ToggleMask &= ~BM_POWER_CHARGE_STOP_ILIMIT;
-	u16ToggleMask |= u16NewSetting << BP_POWER_CHARGE_STOP_ILIMIT;
+	__raw_writel(BF_POWER_CHARGE_STOP_ILIMIT(u16ToggleMask),
+			REGS_POWER_BASE + HW_POWER_CHARGE_TOG);
 
 	// Tell the caller what current we're set at now.
 	return ddi_power_convert_setting_to_current(u16NewSetting);
@@ -977,9 +1132,11 @@ void ddi_power_SetPowerClkGate(bool bGate)
 {
 	// Gate/Ungate the clock to the power block
 	if (bGate) {
-		stmp3xxx_setl(BM_POWER_CTRL_CLKGATE, REGS_POWER_BASE + HW_POWER_CTRL);
+		__raw_writel(BM_POWER_CTRL_CLKGATE,
+			REGS_POWER_BASE + HW_POWER_CTRL_SET);
 	} else {
-		stmp3xxx_clearl(BM_POWER_CTRL_CLKGATE, REGS_POWER_BASE + HW_POWER_CTRL);
+		__raw_writel(BM_POWER_CTRL_CLKGATE,
+			REGS_POWER_BASE + HW_POWER_CTRL_CLR);
 	}
 }
 
-- 
1.5.4.4

