From 2b4ceb88c17e63c1108cd85e1a1fffecba058b77 Mon Sep 17 00:00:00 2001
From: Fred Fan <r01011@freescale.com>
Date: Mon, 1 Feb 2010 17:59:21 +0800
Subject: [PATCH] ENGR00120621-2 i.MX28 LED support

1. Add platform support
2. Changed LED to control brightness by inactve couter

Signed-off-by: Yao Jeremy <r65161@freescale.com>
Signed-off-by: Fred.fan <r01011@freescale.com>
---
 arch/arm/mach-mx28/device.c             |    2 +-
 arch/arm/mach-mx28/mx28evk.c            |   45 ++++++++
 arch/arm/mach-mx28/mx28evk_pins.c       |   22 ++++
 arch/arm/plat-mxs/Kconfig               |    6 +
 arch/arm/plat-mxs/device.c              |   28 ++++-
 arch/arm/plat-mxs/include/mach/device.h |   12 ++
 drivers/leds/Kconfig                    |    6 +
 drivers/leds/Makefile                   |    1 +
 drivers/leds/leds-mxs-pwm.c             |  188 ++++++++++++++++---------------
 9 files changed, 211 insertions(+), 99 deletions(-)

diff --git a/arch/arm/mach-mx28/device.c b/arch/arm/mach-mx28/device.c
index 3ed83d0..1b6a08f 100644
--- a/arch/arm/mach-mx28/device.c
+++ b/arch/arm/mach-mx28/device.c
@@ -751,6 +751,7 @@ static void __init mx28_init_ts(void)
 	;
 }
 #endif
+
 int __init mx28_device_init(void)
 {
 	mx28_init_dma();
@@ -765,7 +766,6 @@ int __init mx28_device_init(void)
 	mx28_init_kbd();
 	mx28_init_ts();
 	mx28_init_lcdif();
-
 	return 0;
 }
 
diff --git a/arch/arm/mach-mx28/mx28evk.c b/arch/arm/mach-mx28/mx28evk.c
index cf7eaaa..a449571 100644
--- a/arch/arm/mach-mx28/mx28evk.c
+++ b/arch/arm/mach-mx28/mx28evk.c
@@ -19,6 +19,7 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/io.h>
+#include <linux/err.h>
 #include <linux/clk.h>
 #include <linux/platform_device.h>
 
@@ -39,9 +40,53 @@ static void __init fixup_board(struct machine_desc *desc, struct tag *tags,
 	mx28_set_input_clk(24000000, 24000000, 32000, 50000000);
 }
 
+#if defined(CONFIG_LEDS_MXS) || defined(CONFIG_LEDS_MXS_MODULE)
+static struct mxs_pwm_led  mx28evk_led_pwm[2] = {
+	[0] = {
+		.name = "led-pwm0",
+		.pwm = 0,
+		},
+	[1] = {
+		.name = "led-pwm1",
+		.pwm = 1,
+		},
+};
+
+struct mxs_pwm_leds_plat_data mx28evk_led_data = {
+	.num = ARRAY_SIZE(mx28evk_led_pwm),
+	.leds = mx28evk_led_pwm,
+};
+
+static struct resource mx28evk_led_res = {
+	.flags = IORESOURCE_MEM,
+	.start = PWM_PHYS_ADDR,
+	.end   = PWM_PHYS_ADDR + 0x3FFF,
+};
+
+static void __init mx28evk_init_leds(void)
+{
+	struct platform_device *pdev;
+
+	pdev = mxs_get_device("mxs-leds", 0);
+	if (pdev == NULL || IS_ERR(pdev))
+		return;
+
+	pdev->resource = &mx28evk_led_res;
+	pdev->num_resources = 1;
+	pdev->dev.platform_data = &mx28evk_led_data;
+	mxs_add_device(pdev, 3);
+}
+#else
+static void __init mx28evk_init_leds(void)
+{
+	;
+}
+#endif
+
 static void __init mx28evk_device_init(void)
 {
 	/* Add mx28evk special code */
+	mx28evk_init_leds();
 }
 
 static void __init mx28evk_init_machine(void)
diff --git a/arch/arm/mach-mx28/mx28evk_pins.c b/arch/arm/mach-mx28/mx28evk_pins.c
index 7199c71..b8f98a2 100644
--- a/arch/arm/mach-mx28/mx28evk_pins.c
+++ b/arch/arm/mach-mx28/mx28evk_pins.c
@@ -672,6 +672,28 @@ static struct pin_desc mx28evk_fixed_pins[] = {
 	 .drive	= 1,
 	 },
 #endif
+#if defined(CONFIG_LEDS_MXS) || defined(CONFIG_LEDS_MXS_MODULE)
+	{
+	 .name = "LEDS_PWM0",
+	 .id = PINID_AUART1_RX,
+	 .fun           = PIN_FUN3,
+	 .strength      = PAD_8MA,
+	 .voltage       = PAD_3_3V,
+	 .pullup        = 1,
+	 .drive         = 1,
+	 .pull          = 1,
+	 },
+	{
+	 .name = "LEDS_PWM1",
+	 .id = PINID_AUART1_TX,
+	 .fun           = PIN_FUN3,
+	 .strength      = PAD_8MA,
+	 .voltage       = PAD_3_3V,
+	 .pullup        = 1,
+	 .drive         = 1,
+	 .pull          = 1,
+	 },
+#endif
 };
 
 #if defined(CONFIG_FEC) || defined(CONFIG_FEC_MODULE)
diff --git a/arch/arm/plat-mxs/Kconfig b/arch/arm/plat-mxs/Kconfig
index 6c02d30..befd404 100644
--- a/arch/arm/plat-mxs/Kconfig
+++ b/arch/arm/plat-mxs/Kconfig
@@ -52,6 +52,12 @@ config MXS_LRADC
 	help
 	  Enable LRADC support
 
+config MXS_PWM_CHANNELS
+	int
+	default 8
+	help
+	  The number of pwm channel on Freescale MXS platform.
+
 menu "Freescale Application UART:"
 
 config MXS_AUART_DMA_SUPPORT
diff --git a/arch/arm/plat-mxs/device.c b/arch/arm/plat-mxs/device.c
index 165d3e0..ae42a71 100644
--- a/arch/arm/plat-mxs/device.c
+++ b/arch/arm/plat-mxs/device.c
@@ -118,7 +118,7 @@ static struct platform_device mxs_i2c[] = {
 	 .name	= "mxs-i2c",
 	 .id	= 0,
 	 .dev = {
-		.dma_mask               = &common_dmamask,
+		.dma_mask	       = &common_dmamask,
 		.coherent_dma_mask      = DMA_BIT_MASK(32),
 		.release = mxs_nop_release,
 		},
@@ -129,7 +129,7 @@ static struct platform_device mxs_i2c[] = {
 	 .name	= "mxs-i2c",
 	 .id	= 1,
 	 .dev = {
-		.dma_mask               = &common_dmamask,
+		.dma_mask	       = &common_dmamask,
 		.coherent_dma_mask      = DMA_BIT_MASK(32),
 		.release = mxs_nop_release,
 		},
@@ -145,7 +145,7 @@ static struct platform_device mxs_mmc[] = {
 	 .name	= "mxs-mmc",
 	 .id	= 0,
 	 .dev = {
-		.dma_mask               = &common_dmamask,
+		.dma_mask	       = &common_dmamask,
 		.coherent_dma_mask      = DMA_BIT_MASK(32),
 		.release = mxs_nop_release,
 		},
@@ -154,7 +154,7 @@ static struct platform_device mxs_mmc[] = {
 	 .name	= "mxs-mmc",
 	 .id	= 1,
 	 .dev = {
-		.dma_mask               = &common_dmamask,
+		.dma_mask	       = &common_dmamask,
 		.coherent_dma_mask      = DMA_BIT_MASK(32),
 		.release = mxs_nop_release,
 		},
@@ -190,7 +190,7 @@ static struct platform_device mxs_fb = {
 	.name	= "mxs-fb",
 	.id	= 0,
 	.dev = {
-		.dma_mask               = &common_dmamask,
+		.dma_mask	       = &common_dmamask,
 		.coherent_dma_mask      = DMA_BIT_MASK(32),
 		.release = mxs_nop_release,
 		},
@@ -308,6 +308,16 @@ static struct platform_device mxs_auart[] = {
 };
 #endif
 
+#if defined(CONFIG_LEDS_MXS) || defined(CONFIG_LEDS_MXS_MODULE)
+static struct platform_device mxs_led = {
+	.name = "mxs-leds",
+	.id = 0,
+	.dev = {
+		 .release = mxs_nop_release,
+		 },
+};
+#endif
+
 static struct mxs_dev_lookup dev_lookup[] = {
 #if defined(CONFIG_SERIAL_MXS_DUART) || \
 	defined(CONFIG_SERIAL_MXS_DUART_MODULE)
@@ -413,6 +423,14 @@ static struct mxs_dev_lookup dev_lookup[] = {
 	 .pdev = mxs_auart,
 	 },
 #endif
+
+#if defined(CONFIG_LEDS_MXS) || defined(CONFIG_LEDS_MXS_MODULE)
+	{
+	 .name = "mxs-leds",
+	 .size = 1,
+	 .pdev = &mxs_led,
+	 },
+#endif
 };
 
 struct platform_device *mxs_get_device(char *name, int id)
diff --git a/arch/arm/plat-mxs/include/mach/device.h b/arch/arm/plat-mxs/include/mach/device.h
index a8b59a3..aaf61bf 100644
--- a/arch/arm/plat-mxs/include/mach/device.h
+++ b/arch/arm/plat-mxs/include/mach/device.h
@@ -23,6 +23,7 @@
 #include <linux/interrupt.h>
 #include <linux/io.h>
 #include <linux/ioport.h>
+#include <linux/leds.h>
 
 #include <asm/mach/time.h>
 
@@ -94,6 +95,17 @@ struct mxs_auart_plat_data {
 	const char *clk;
 };
 
+struct mxs_pwm_led {
+	struct led_classdev dev;
+	const char *name;
+	unsigned int pwm;
+};
+
+struct mxs_pwm_leds_plat_data {
+	unsigned int num;
+	struct mxs_pwm_led *leds;
+};
+
 extern void mxs_timer_init(struct mxs_sys_timer *timer);
 
 extern void mxs_nop_release(struct device *dev);
diff --git a/drivers/leds/Kconfig b/drivers/leds/Kconfig
index f5dea97..9b9f508 100644
--- a/drivers/leds/Kconfig
+++ b/drivers/leds/Kconfig
@@ -24,6 +24,12 @@ config LEDS_STMP378X
 	  This option enables support for the LEDs connected to PWM
 	  outputs on the Freescale STMP378X.
 
+config LEDS_MXS
+	tristate "Support for PWM LEDs on MXS"
+	depends on LEDS_CLASS && ARCH_MXS
+	help
+	  This option enables support for the LEDs connected to PWM
+	  outputs on the Freescale MXS SOC.
 
 config LEDS_ATMEL_PWM
 	tristate "LED Support using Atmel PWM outputs"
diff --git a/drivers/leds/Makefile b/drivers/leds/Makefile
index b830a51..46a0f9a 100644
--- a/drivers/leds/Makefile
+++ b/drivers/leds/Makefile
@@ -30,6 +30,7 @@ obj-$(CONFIG_LEDS_PCA955X)		+= leds-pca955x.o
 obj-$(CONFIG_LEDS_DA903X)		+= leds-da903x.o
 obj-$(CONFIG_LEDS_WM8350)		+= leds-wm8350.o
 obj-$(CONFIG_LEDS_PWM)			+= leds-pwm.o
+obj-$(CONFIG_LEDS_MXS)			+= leds-mxs-pwm.o
 
 # LED SPI Drivers
 obj-$(CONFIG_LEDS_DAC124S085)		+= leds-dac124s085.o
diff --git a/drivers/leds/leds-mxs-pwm.c b/drivers/leds/leds-mxs-pwm.c
index a3fd10e..c768217 100644
--- a/drivers/leds/leds-mxs-pwm.c
+++ b/drivers/leds/leds-mxs-pwm.c
@@ -1,5 +1,5 @@
 /*
- * Freescale STMP378X PWM LED driver
+ * Freescale MXS PWM LED driver
  *
  * Author: Drew Benedetti <drewb@embeddedalley.com>
  *
@@ -20,171 +20,173 @@
 #include <linux/platform_device.h>
 #include <linux/leds.h>
 #include <linux/err.h>
+#include <linux/io.h>
 #include <linux/clk.h>
+
 #include <mach/hardware.h>
+#include <mach/system.h>
+#include <mach/device.h>
 #include <mach/regs-pwm.h>
-#include <mach/regs-clkctrl.h>
-#include <mach/pwm-led.h>
-#include <mach/stmp3xxx.h>
 
-/* Up to 5 PWM lines are available. */
-#define PWM_MAX 5
 
-/* PWM enables are the lowest PWM_MAX bits of HW_PWM_CTRL register */
-#define BM_PWM_CTRL_PWM_ENABLE(n)	((1<<(n)) & ((1<<(PWM_MAX))-1))
+/*
+ * PWM enables are the lowest bits of HW_PWM_CTRL register
+ */
+#define BM_PWM_CTRL_PWM_ENABLE	((1<<(CONFIG_MXS_PWM_CHANNELS)) - 1)
+#define BF_PWM_CTRL_PWM_ENABLE(n) ((1<<(n)) & BM_PWM_CTRL_PWM_ENABLE)
+
 #define BF_PWM_PERIODn_SETTINGS					\
 		(BF_PWM_PERIODn_CDIV(5) | /* divide by 64 */ 	\
-		BF_PWM_PERIODn_INACTIVE_STATE(2) | /* low */ 	\
-		BF_PWM_PERIODn_ACTIVE_STATE(3) | /* high */ 	\
+		BF_PWM_PERIODn_INACTIVE_STATE(3) | /* low */ 	\
+		BF_PWM_PERIODn_ACTIVE_STATE(2) | /* high */ 	\
 		BF_PWM_PERIODn_PERIOD(LED_FULL)) /* 255 cycles */
 
-struct stmp378x_led {
-	struct led_classdev led_dev;
-	int in_use;
+struct mxs_pwm_leds {
+	struct clk *pwm_clk;
+	unsigned int base;
+	unsigned int led_num;
+	struct mxs_pwm_led *leds;
 };
 
-static struct stmp378x_led leds[PWM_MAX];
+static struct mxs_pwm_leds leds;
 
-static struct clk *pwm_clk;
-
-static void stmp378x_pwm_led_brightness_set(struct led_classdev *pled,
+static void mxs_pwm_led_brightness_set(struct led_classdev *pled,
 					    enum led_brightness value)
 {
-	unsigned int pwmn;
-
-	pwmn = container_of(pled, struct stmp378x_led, led_dev) - leds;
-
-	if (pwmn < PWM_MAX && leds[pwmn].in_use) {
-		HW_PWM_CTRL_CLR(BM_PWM_CTRL_PWM_ENABLE(pwmn));
-		HW_PWM_ACTIVEn_WR(pwmn, BF_PWM_ACTIVEn_INACTIVE(value) |
-				BF_PWM_ACTIVEn_ACTIVE(0));
-		HW_PWM_PERIODn_WR(pwmn, BF_PWM_PERIODn_SETTINGS);
-		HW_PWM_CTRL_SET(BM_PWM_CTRL_PWM_ENABLE(pwmn));
+	struct mxs_pwm_led *pwm_led;
+
+	pwm_led = container_of(pled, struct mxs_pwm_led, dev);
+
+	if (pwm_led->pwm < CONFIG_MXS_PWM_CHANNELS) {
+		__raw_writel(BF_PWM_CTRL_PWM_ENABLE(pwm_led->pwm),
+			     leds.base + HW_PWM_CTRL_CLR);
+		__raw_writel(BF_PWM_ACTIVEn_INACTIVE(LED_FULL) |
+				BF_PWM_ACTIVEn_ACTIVE(value),
+			     leds.base + HW_PWM_ACTIVEn(pwm_led->pwm));
+		__raw_writel(BF_PWM_PERIODn_SETTINGS,
+			     leds.base + HW_PWM_PERIODn(pwm_led->pwm));
+		__raw_writel(BF_PWM_CTRL_PWM_ENABLE(pwm_led->pwm),
+			     leds.base + HW_PWM_CTRL_SET);
 	}
 }
 
-static int stmp378x_pwm_led_probe(struct platform_device *pdev)
+static int __devinit mxs_pwm_led_probe(struct platform_device *pdev)
 {
+	struct mxs_pwm_leds_plat_data *plat_data;
+	struct resource *res;
 	struct led_classdev *led;
 	unsigned int pwmn;
 	int leds_in_use = 0, rc = 0;
 	int i;
 
-	stmp3xxx_reset_block(REGS_PWM_BASE, 1);
+	plat_data = (struct mxs_pwm_leds_plat_data *)pdev->dev.platform_data;
+	if (plat_data == NULL)
+		return -ENODEV;
 
-	pwm_clk = clk_get(&pdev->dev, "pwm");
-	if (IS_ERR(pwm_clk)) {
-		rc = PTR_ERR(pwm_clk);
-		return rc;
-	}
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (res == NULL)
+		return -ENODEV;
+	leds.base = (unsigned int)IO_ADDRESS(res->start);
 
-	clk_enable(pwm_clk);
+	mxs_reset_block((void __iomem *)leds.base, 1);
 
-	for (i = 0; i < pdev->num_resources; i++) {
+	leds.led_num = plat_data->num;
+	if (leds.led_num <= 0 || leds.led_num > CONFIG_MXS_PWM_CHANNELS)
+		return -EFAULT;
+	leds.leds = plat_data->leds;
+	if (leds.leds == NULL)
+		return -EFAULT;
 
-		if (pdev->resource[i].flags & IORESOURCE_DISABLED)
-			continue;
+	leds.pwm_clk = clk_get(&pdev->dev, "pwm");
+	if (IS_ERR(leds.pwm_clk)) {
+		rc = PTR_ERR(leds.pwm_clk);
+		return rc;
+	}
 
-		pwmn = pdev->resource[i].start;
-		if (pwmn >= PWM_MAX) {
-			dev_err(&pdev->dev, "PWM %d doesn't exist\n", pwmn);
-			continue;
-		}
+	clk_enable(leds.pwm_clk);
 
-		rc = pwm_led_pinmux_request(pwmn, "stmp378x_pwm_led");
-		if (rc) {
+	for (i = 0; i < leds.led_num; i++) {
+		pwmn = leds.leds[i].pwm;
+		if (pwmn >= CONFIG_MXS_PWM_CHANNELS) {
 			dev_err(&pdev->dev,
-				"PWM %d is not available (err=%d)\n",
-				pwmn, rc);
+				"[led-pwm%d]:PWM %d doesn't exist\n",
+				i, pwmn);
 			continue;
 		}
-
-		led = &leds[pwmn].led_dev;
-
-		led->flags = pdev->resource[i].flags;
-		led->name = pdev->resource[i].name;
+		led = &(leds.leds[i].dev);
+		led->name = leds.leds[i].name;
 		led->brightness = LED_HALF;
 		led->flags = 0;
-		led->brightness_set = stmp378x_pwm_led_brightness_set;
+		led->brightness_set = mxs_pwm_led_brightness_set;
 		led->default_trigger = 0;
 
 		rc = led_classdev_register(&pdev->dev, led);
 		if (rc < 0) {
 			dev_err(&pdev->dev,
 				"Unable to register LED device %d (err=%d)\n",
-				pwmn, rc);
-			pwm_led_pinmux_free(pwmn, "stmp378x_pwm_led");
+				i, rc);
 			continue;
 		}
 
-		/* PWM LED is available now */
-		leds[pwmn].in_use = !0;
 		leds_in_use++;
 
 		/* Set default brightness */
-		stmp378x_pwm_led_brightness_set(led, LED_HALF);
+		mxs_pwm_led_brightness_set(led, LED_HALF);
 	}
 
 	if (leds_in_use == 0) {
 		dev_info(&pdev->dev, "No PWM LEDs available\n");
-		clk_disable(pwm_clk);
-		clk_put(pwm_clk);
+		clk_disable(leds.pwm_clk);
+		clk_put(leds.pwm_clk);
 		return -ENODEV;
 	}
-
 	return 0;
 }
 
-static int stmp378x_pwm_led_remove(struct platform_device *pdev)
+static int __devexit mxs_pwm_led_remove(struct platform_device *pdev)
 {
-	unsigned int pwmn;
-
-	for (pwmn = 0; pwmn < PWM_MAX; pwmn++) {
-
-		if (!leds[pwmn].in_use)
-			continue;
-
-		/* Disable LED */
-		HW_PWM_CTRL_CLR(BM_PWM_CTRL_PWM_ENABLE(pwmn));
-		HW_PWM_ACTIVEn_WR(pwmn, BF_PWM_ACTIVEn_INACTIVE(0) |
-				BF_PWM_ACTIVEn_ACTIVE(0));
-		HW_PWM_PERIODn_WR(pwmn, BF_PWM_PERIODn_SETTINGS);
-
-		led_classdev_unregister(&leds[pwmn].led_dev);
-		pwm_led_pinmux_free(pwmn, "stmp378x_pwm_led");
-
-		leds[pwmn].led_dev.name = 0;
-		leds[pwmn].in_use = 0;
+	int i;
+	unsigned int pwm;
+	for (i = 0; i < leds.led_num; i++) {
+		pwm = leds.leds[i].pwm;
+		__raw_writel(BF_PWM_CTRL_PWM_ENABLE(pwm),
+			     leds.base + HW_PWM_CTRL_CLR);
+		__raw_writel(BF_PWM_ACTIVEn_INACTIVE(0) |
+				BF_PWM_ACTIVEn_ACTIVE(0),
+			     leds.base + HW_PWM_ACTIVEn(pwm));
+		__raw_writel(BF_PWM_PERIODn_SETTINGS,
+			     leds.base + HW_PWM_PERIODn(pwm));
+		led_classdev_unregister(&leds.leds[i].dev);
 	}
 
-	clk_disable(pwm_clk);
-	clk_put(pwm_clk);
+	clk_disable(leds.pwm_clk);
+	clk_put(leds.pwm_clk);
 
 	return 0;
 }
 
 
-static struct platform_driver stmp378x_pwm_led_driver = {
-	.probe   = stmp378x_pwm_led_probe,
-	.remove  = stmp378x_pwm_led_remove,
+static struct platform_driver mxs_pwm_led_driver = {
+	.probe   = mxs_pwm_led_probe,
+	.remove  = __devexit_p(mxs_pwm_led_remove),
 	.driver  = {
-		.name = "stmp378x-pwm-led",
+		.name = "mxs-leds",
 	},
 };
 
-static int __init stmp378x_pwm_led_init(void)
+static int __init mxs_pwm_led_init(void)
 {
-	return platform_driver_register(&stmp378x_pwm_led_driver);
+	return platform_driver_register(&mxs_pwm_led_driver);
 }
 
-static void __exit stmp378x_pwm_led_exit(void)
+static void __exit mxs_pwm_led_exit(void)
 {
-	platform_driver_unregister(&stmp378x_pwm_led_driver);
+	platform_driver_unregister(&mxs_pwm_led_driver);
 }
 
-module_init(stmp378x_pwm_led_init);
-module_exit(stmp378x_pwm_led_exit);
+module_init(mxs_pwm_led_init);
+module_exit(mxs_pwm_led_exit);
 
 MODULE_AUTHOR("Drew Benedetti <drewb@embeddedalley.com>");
-MODULE_DESCRIPTION("STMP378X PWM LED driver");
+MODULE_DESCRIPTION("mxs PWM LED driver");
 MODULE_LICENSE("GPL");
-- 
1.5.4.4

